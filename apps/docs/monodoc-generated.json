[
  {
    "slugName": "fs",
    "pageSummary": "A Future-wrapped `fs` API, for future-based, lazy, easy-to-model asynchrony that makes it easy to manipulate the file system.",
    "filename": "packages/file-system/src/fs.js",
    "comments": [
      {
        "start": 14,
        "end": 16,
        "lines": [
          "@pageSummary A Future-wrapped `fs` API, for future-based, lazy, easy-to-model asynchrony that makes it easy to manipulate the file system."
        ],
        "summary": "@pageSummary A Future-wrapped `fs` API, for future-based, lazy, easy-to-model asynchrony that makes it easy to manipulate the file system.",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "pageSummary": [
            "A",
            "Future-wrapped",
            "`fs`",
            "API,",
            "for",
            "future-based,",
            "lazy,",
            "easy-to-model",
            "asynchrony",
            "that",
            "makes",
            "it",
            "easy",
            "to",
            "manipulate",
            "the",
            "file",
            "system."
          ]
        },
        "keywords": [
          "@pageSummary"
        ],
        "filename": "packages/file-system/src/fs.js"
      },
      {
        "start": 26,
        "end": 34,
        "lines": [
          "make a file string relative",
          "@name localize",
          "@example",
          "```js",
          "import { localize } from 'file-system'",
          "console.log(`support localize('business')`)",
          "```"
        ],
        "summary": "make a file string relative",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "localize",
          "example": "```js\nimport { localize } from 'file-system'\nconsole.log(`support localize('business')`)\n```"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/file-system/src/fs.js"
      },
      {
        "start": 37,
        "end": 46,
        "lines": [
          "read a file asynchronously and future wrapped",
          "@name readFile",
          "@example",
          "```js",
          "import { fork } from 'fluture'",
          "import { readFile } from 'file-system'",
          "fork(console.warn)(console.log)(readFile('./README.md'))",
          "```"
        ],
        "summary": "read a file asynchronously and future wrapped",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "readFile",
          "example": "```js\nimport { fork } from 'fluture'\nimport { readFile } from 'file-system'\nfork(console.warn)(console.log)(readFile('./README.md'))\n```"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/file-system/src/fs.js"
      },
      {
        "start": 58,
        "end": 67,
        "lines": [
          "read a JSON file asynchronously and future wrapped",
          "@name readJSONFile",
          "@example",
          "```js",
          "import { fork } from 'fluture'",
          "import { readJSONFile } from 'file-system'",
          "fork(console.warn)(console.log)(readJSONFile('./package.json'))",
          "```"
        ],
        "summary": "read a JSON file asynchronously and future wrapped",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "readJSONFile",
          "example": "```js\nimport { fork } from 'fluture'\nimport { readJSONFile } from 'file-system'\nfork(console.warn)(console.log)(readJSONFile('./package.json'))\n```"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/file-system/src/fs.js"
      },
      {
        "start": 73,
        "end": 87,
        "lines": [
          "read a `glob` asynchronously and future wrapped, with configuration",
          "@name readDirWithConfig",
          "@example",
          "```js",
          "import { fork } from 'fluture'",
          "import { readDirWithConfig } from 'file-system'",
          "// [...]",
          "fork(console.warn)(console.log)(readDirWithConfig({}, 'src/*'))",
          "// [...]",
          "pipe(",
          "  fork(console.warn)(console.log)",
          ")(readDirWithConfig({ ignore: ['node_modules/**'] }, 'src/*'))",
          "```"
        ],
        "summary": "read a `glob` asynchronously and future wrapped, with configuration",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "readDirWithConfig",
          "example": "```js\nimport { fork } from 'fluture'\nimport { readDirWithConfig } from 'file-system'\n// [...]\nfork(console.warn)(console.log)(readDirWithConfig({}, 'src/*'))\n// [...]\npipe(\n  fork(console.warn)(console.log)\n)(readDirWithConfig({ ignore: ['node_modules/**'] }, 'src/*'))\n```"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/file-system/src/fs.js"
      },
      {
        "start": 104,
        "end": 114,
        "lines": [
          "read a `glob` asynchronously and future wrapped, no config needed",
          "@name readDir",
          "@example",
          "```js",
          "import { fork } from 'fluture'",
          "import { readDirWithConfig } from 'file-system'",
          "// [...]",
          "fork(console.warn)(console.log)(readDir('src/*'))",
          "```"
        ],
        "summary": "read a `glob` asynchronously and future wrapped, no config needed",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "readDir",
          "example": "```js\nimport { fork } from 'fluture'\nimport { readDirWithConfig } from 'file-system'\n// [...]\nfork(console.warn)(console.log)(readDir('src/*'))\n```"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/file-system/src/fs.js"
      },
      {
        "start": 117,
        "end": 133,
        "lines": [
          "Write a file, with configuration",
          "@name writeFileWithConfig",
          "@example",
          "```js",
          "import { fork } from 'fluture'",
          "import { writeFileWithConfig } from 'file-system'",
          "// [...]",
          "fork(console.warn)(console.log)(",
          "  writeFileWithConfig(",
          "    { ...fs.writeFileConfig },",
          "    'my-file.txt',",
          "    'hey I am a file'",
          "  )",
          ")",
          "```"
        ],
        "summary": "Write a file, with configuration",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "writeFileWithConfig",
          "example": "```js\nimport { fork } from 'fluture'\nimport { writeFileWithConfig } from 'file-system'\n// [...]\nfork(console.warn)(console.log)(\n  writeFileWithConfig(\n    { ...fs.writeFileConfig },\n    'my-file.txt',\n    'hey I am a file'\n  )\n)\n```"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/file-system/src/fs.js"
      },
      {
        "start": 150,
        "end": 165,
        "lines": [
          "Write a file, assuming 'utf8'",
          "@name writeFile",
          "@example",
          "```js",
          "import { fork } from 'fluture'",
          "import { writeFile } from 'file-system'",
          "// [...]",
          "fork(console.warn)(console.log)(",
          "  writeFile(",
          "    'my-file.txt',",
          "    'hey I am a file'",
          "  )",
          ")",
          "```"
        ],
        "summary": "Write a file, assuming 'utf8'",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "writeFile",
          "example": "```js\nimport { fork } from 'fluture'\nimport { writeFile } from 'file-system'\n// [...]\nfork(console.warn)(console.log)(\n  writeFile(\n    'my-file.txt',\n    'hey I am a file'\n  )\n)\n```"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/file-system/src/fs.js"
      },
      {
        "start": 168,
        "end": 183,
        "lines": [
          "Remove a file, configurably",
          "@name removeFileWithConfig",
          "@example",
          "```js",
          "import { fork } from 'fluture'",
          "import { removeFileWithConfig } from 'file-system'",
          "// [...]",
          "fork(console.warn)(console.log)(",
          "  removeFileWithConfig(",
          "    { ...fs.removeFileConfig },",
          "    'my-file.txt'",
          "  )",
          ")",
          "```"
        ],
        "summary": "Remove a file, configurably",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "removeFileWithConfig",
          "example": "```js\nimport { fork } from 'fluture'\nimport { removeFileWithConfig } from 'file-system'\n// [...]\nfork(console.warn)(console.log)(\n  removeFileWithConfig(\n    { ...fs.removeFileConfig },\n    'my-file.txt'\n  )\n)\n```"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/file-system/src/fs.js"
      },
      {
        "start": 200,
        "end": 214,
        "lines": [
          "Remove a file, default config",
          "@name removeFile",
          "@example",
          "```js",
          "import { fork } from 'fluture'",
          "import { removeFile } from 'file-system'",
          "// [...]",
          "fork(console.warn)(console.log)(",
          "  removeFile(",
          "    'my-file.txt'",
          "  )",
          ")",
          "```"
        ],
        "summary": "Remove a file, default config",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "removeFile",
          "example": "```js\nimport { fork } from 'fluture'\nimport { removeFile } from 'file-system'\n// [...]\nfork(console.warn)(console.log)(\n  removeFile(\n    'my-file.txt'\n  )\n)\n```"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/file-system/src/fs.js"
      },
      {
        "start": 217,
        "end": 232,
        "lines": [
          "Remove multiple files, configurably",
          "@name removeFilesWithConfig",
          "@example",
          "```js",
          "import { fork } from 'fluture'",
          "import { removeFilesWithConfig } from 'file-system'",
          "// [...]",
          "fork(console.warn)(console.log)(",
          "  removeFilesWithConfig(",
          "    { parallel: 30 },",
          "    [...list, ...of, ...thirty, ...files]",
          "  )",
          ")",
          "```"
        ],
        "summary": "Remove multiple files, configurably",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "removeFilesWithConfig",
          "example": "```js\nimport { fork } from 'fluture'\nimport { removeFilesWithConfig } from 'file-system'\n// [...]\nfork(console.warn)(console.log)(\n  removeFilesWithConfig(\n    { parallel: 30 },\n    [...list, ...of, ...thirty, ...files]\n  )\n)\n```"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/file-system/src/fs.js"
      },
      {
        "start": 241,
        "end": 255,
        "lines": [
          "Remove multiple files, sans configuration",
          "@name removeFiles",
          "@example",
          "```js",
          "import { fork } from 'fluture'",
          "import { removeFiles } from 'file-system'",
          "// [...]",
          "fork(console.warn)(console.log)(",
          "  removeFiles(",
          "    [...list, ...of, ...files]",
          "  )",
          ")",
          "```"
        ],
        "summary": "Remove multiple files, sans configuration",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "removeFiles",
          "example": "```js\nimport { fork } from 'fluture'\nimport { removeFiles } from 'file-system'\n// [...]\nfork(console.warn)(console.log)(\n  removeFiles(\n    [...list, ...of, ...files]\n  )\n)\n```"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/file-system/src/fs.js"
      },
      {
        "start": 258,
        "end": 273,
        "lines": [
          "Make a directory, but futuristically",
          "@name mkdir",
          "@example",
          "```js",
          "import { fork } from 'fluture'",
          "import { mkdir } from 'file-system'",
          "// [...]",
          "fork(console.warn)(console.log)(",
          "  mkdir(",
          "    {},",
          "    'my-dir'",
          "  )",
          ")",
          "```"
        ],
        "summary": "Make a directory, but futuristically",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "mkdir",
          "example": "```js\nimport { fork } from 'fluture'\nimport { mkdir } from 'file-system'\n// [...]\nfork(console.warn)(console.log)(\n  mkdir(\n    {},\n    'my-dir'\n  )\n)\n```"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/file-system/src/fs.js"
      },
      {
        "start": 296,
        "end": 311,
        "lines": [
          "Write a file to a nested folder and automatically create needed folders, akin to `mkdir -p`",
          "@name writeFileWithAutoPath",
          "@example",
          "```js",
          "import { fork } from 'fluture'",
          "import { writeFileWithAutoPath } from 'file-system'",
          "// [...]",
          "fork(console.warn)(console.log)(",
          "  writeFileWithAutoPath(",
          "    \"folders/you/must/exist/file.biz\",",
          "    \"my cool content\"",
          "  )",
          ")",
          "```"
        ],
        "summary": "Write a file to a nested folder and automatically create needed folders, akin to `mkdir -p`",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "writeFileWithAutoPath",
          "example": "```js\nimport { fork } from 'fluture'\nimport { writeFileWithAutoPath } from 'file-system'\n// [...]\nfork(console.warn)(console.log)(\n  writeFileWithAutoPath(\n    \"folders/you/must/exist/file.biz\",\n    \"my cool content\"\n  )\n)\n```"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/file-system/src/fs.js"
      }
    ],
    "order": 0,
    "links": [],
    "workspace": "file-system"
  },
  {
    "slugName": "helpers",
    "pageTitle": "helpers",
    "pageSummary": "Built-in helpers for making custom plugins more robust. The \"helpers\" are the third parameter passed to a custom plugin's function.",
    "filename": "packages/monorail/src/helpers.js",
    "comments": [
      {
        "start": 21,
        "end": 24,
        "lines": [
          "@pageSummary Built-in helpers for making custom plugins more robust. The \"helpers\" are the third parameter passed to a custom plugin's function.",
          "@page helpers"
        ],
        "summary": "@pageSummary Built-in helpers for making custom plugins more robust. The \"helpers\" are the third parameter passed to a custom plugin's function.",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "pageSummary": [
            "Built-in",
            "helpers",
            "for",
            "making",
            "custom",
            "plugins",
            "more",
            "robust.",
            "The",
            "\"helpers\"",
            "are",
            "the",
            "third",
            "parameter",
            "passed",
            "to",
            "a",
            "custom",
            "plugin's",
            "function."
          ],
          "page": "helpers",
          "name": "helpers",
          "detail": 21
        },
        "keywords": [
          "@page",
          "@pageSummary"
        ],
        "filename": "packages/monorail/src/helpers.js"
      },
      {
        "start": 32,
        "end": 43,
        "lines": [
          "Use this helper to test a regex that matches against any single incidence on any line",
          "@name any",
          "@example",
          "```js",
          "const plugin = {",
          "  name: 'get-const',",
          "  fn: (state, file, { any }) => any(/const/)",
          "}",
          "export default plugin",
          "```"
        ],
        "summary": "Use this helper to test a regex that matches against any single incidence on any line",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "any",
          "example": "```js\nconst plugin = {\n  name: 'get-const',\n  fn: (state, file, { any }) => any(/const/)\n}\nexport default plugin\n```"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/monorail/src/helpers.js"
      },
      {
        "start": 46,
        "end": 56,
        "lines": [
          "Use this helper to test a regex that matches and filters against every line",
          "@name lines",
          "@example",
          "```js",
          "export default {",
          "  name: 'unexported-consts',",
          "  fn: (state, file, { lines }) => lines(/^const/)",
          "}",
          "```"
        ],
        "summary": "Use this helper to test a regex that matches and filters against every line",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "lines",
          "example": "```js\nexport default {\n  name: 'unexported-consts',\n  fn: (state, file, { lines }) => lines(/^const/)\n}\n```"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/monorail/src/helpers.js"
      },
      {
        "start": 61,
        "end": 71,
        "lines": [
          "Use this helper to test a regex that matches and finds the first matching line",
          "@name line",
          "@example",
          "```js",
          "export default {",
          "  name: 'exported-default',",
          "  fn: (state, file, { line }) => line(/export default/g)",
          "}",
          "```"
        ],
        "summary": "Use this helper to test a regex that matches and finds the first matching line",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "line",
          "example": "```js\nexport default {\n  name: 'exported-default',\n  fn: (state, file, { line }) => line(/export default/g)\n}\n```"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/monorail/src/helpers.js"
      },
      {
        "start": 76,
        "end": 86,
        "lines": [
          "Use this helper to test a regex that matches and finds the last matching line",
          "@name lastLine",
          "@example",
          "```js",
          "export default {",
          "  name: 'exported-last',",
          "  fn: (state, file, { lastLine }) => lastLine(/export/g)",
          "}",
          "```"
        ],
        "summary": "Use this helper to test a regex that matches and finds the last matching line",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "lastLine",
          "example": "```js\nexport default {\n  name: 'exported-last',\n  fn: (state, file, { lastLine }) => lastLine(/export/g)\n}\n```"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/monorail/src/helpers.js"
      },
      {
        "start": 91,
        "end": 101,
        "lines": [
          "Use this helper to select content between two repeating regular expressions",
          "@name between",
          "@example",
          "```js",
          "export default {",
          "  name: 'expanded-imports',",
          "  fn: (state, file, { between }) => between(/^import/, /from (.*)/)",
          "}",
          "```"
        ],
        "summary": "Use this helper to select content between two repeating regular expressions",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "between",
          "example": "```js\nexport default {\n  name: 'expanded-imports',\n  fn: (state, file, { between }) => between(/^import/, /from (.*)/)\n}\n```"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/monorail/src/helpers.js"
      },
      {
        "start": 114,
        "end": 124,
        "lines": [
          "Use this helper to select all content between two repeating regular expressions",
          "@name selectAll",
          "@example",
          "```js",
          "export default {",
          "  name: 'expanded-imports',",
          "  fn: (state, file, { selectAll }) => selectAll(/^import/, /from (.*)/)",
          "}",
          "```"
        ],
        "summary": "Use this helper to select all content between two repeating regular expressions",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "selectAll",
          "example": "```js\nexport default {\n  name: 'expanded-imports',\n  fn: (state, file, { selectAll }) => selectAll(/^import/, /from (.*)/)\n}\n```"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/monorail/src/helpers.js"
      },
      {
        "start": 162,
        "end": 173,
        "lines": [
          "Use this helper to easily reduce over all lines and aggregate a value",
          "@name reduce",
          "@example",
          "```js",
          "const plugin = {",
          "  name: 'select-specifics',",
          "  fn: (state, file, { reduce }) => reduce((agg, [line, content]) => content.length > 10 : agg.concat(content) : agg, [])",
          "}",
          "export default plugin",
          "```"
        ],
        "summary": "Use this helper to easily reduce over all lines and aggregate a value",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "reduce",
          "example": "```js\nconst plugin = {\n  name: 'select-specifics',\n  fn: (state, file, { reduce }) => reduce((agg, [line, content]) => content.length > 10 : agg.concat(content) : agg, [])\n}\nexport default plugin\n```"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/monorail/src/helpers.js"
      },
      {
        "start": 178,
        "end": 191,
        "lines": [
          "Use this helper to easily filter all lines related to a given regular expression",
          "@name filter",
          "@example",
          "```js",
          "const plugin = {",
          "  name: 'keyword-match',",
          "  fn: (state, file, { config, filter }) => filter(",
          "    config?.keyword ?? /monorail/",
          "  )",
          "}",
          "export default plugin",
          "```"
        ],
        "summary": "Use this helper to easily filter all lines related to a given regular expression",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "filter",
          "example": "```js\nconst plugin = {\n  name: 'keyword-match',\n  fn: (state, file, { config, filter }) => filter(\n    config?.keyword ?? /monorail/\n  )\n}\nexport default plugin\n```"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/monorail/src/helpers.js"
      },
      {
        "start": 205,
        "end": 218,
        "lines": [
          "The `config` value is patched in so that it is easier to pass values from the rulefile configuration to the plugins themselves, scoped to the plugin name.",
          "@name config",
          "@example",
          "```js",
          "const plugin = {",
          "  name: 'keyword-match',",
          "  fn: (state, file, { filter, config }) => filter(",
          "    config?.keyword ?? /monorail/",
          "  )",
          "}",
          "export default plugin",
          "```"
        ],
        "summary": "The `config` value is patched in so that it is easier to pass values from the rulefile configuration to the plugins themselves, scoped to the plugin name.",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "config",
          "example": "```js\nconst plugin = {\n  name: 'keyword-match',\n  fn: (state, file, { filter, config }) => filter(\n    config?.keyword ?? /monorail/\n  )\n}\nexport default plugin\n```"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/monorail/src/helpers.js"
      }
    ],
    "order": 0,
    "links": [],
    "workspace": "monorail"
  }
]