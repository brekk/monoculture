[
  {
    "slugName": "executables",
    "pageSummary": "",
    "filename": "packages/bloodline/executables.js",
    "comments": [
      {
        "start": 17,
        "end": 58,
        "summary": "Check for the existence of `gvpr`.",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "curried": [
            {
              "name": "",
              "lines": "1. checkForGraphvizWithCancel - Provide a cancellation function and a path to look for `gvpr` within.\n   @example\n   ```js\n   import { checkForGraphvizWithCancel } from 'bloodline'\n   import { fork } from 'fluture'\n   fork(console.warn)(console.log)(\n checkForGraphvizWithCancel(\n   cancellationFn,\n   '/opt/homebrew/bin'\n )\n   )\n2. checkForGraphvizAtPath - Provide a path to look for `gvpr` in.\n   @example\n   ```js\n   import { checkForGraphvizAtPath } from 'bloodline'\n   import { fork } from 'fluture'\n   fork(console.warn)(console.log)(\n checkForGraphvizAtPath(\n   '/opt/homebrew/bin'\n )\n   )\n   ```\n3. checkForGraphviz - Check for graphviz, assuming it is already within your path.\n   @example\n   ```js\n   import { checkForGraphviz } from 'bloodline'\n   import { fork } from 'fluture'\n   fork(console.warn)(console.log)(\n checkForGraphvizWithCancel(\n )\n   )\n   ```"
            }
          ]
        },
        "keywords": [
          "@curried",
          "@example"
        ],
        "filename": "packages/bloodline/executables.js"
      }
    ],
    "order": 0,
    "links": [],
    "workspace": "bloodline"
  },
  {
    "slugName": "fs",
    "pageSummary": "A Future-wrapped `fs` API, for future-based, lazy, easy-to-model asynchrony that makes it easy to manipulate the file system.",
    "filename": "packages/file-system/fs.js",
    "comments": [
      {
        "start": 15,
        "end": 17,
        "summary": "@pageSummary A Future-wrapped `fs` API, for future-based, lazy, easy-to-model asynchrony that makes it easy to manipulate the file system.",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "pageSummary": [
            "A Future-wrapped `fs` API, for future-based, lazy, easy-to-model asynchrony that makes it easy to manipulate the file system."
          ]
        },
        "keywords": [
          "@pageSummary"
        ],
        "filename": "packages/file-system/fs.js"
      },
      {
        "start": 27,
        "end": 36,
        "summary": "make a file string relative",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "localize",
          "example": "```js\nimport { localize } from 'file-system'\nconsole.log(`support ${localize('business')}`)\n// support ./business\n```"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/file-system/fs.js"
      },
      {
        "start": 39,
        "end": 70,
        "summary": "Read a file asynchronously as a Future-wrapped value.",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "curried": [
            {
              "name": "readFileWithFormatAndCancel",
              "summary": "Can be given a file encoding and a cancellation function.",
              "lines": "```js\nimport { fork } from 'fluture'\nimport { readFile } from 'file-system'\nfork(console.warn)(console.log)(\n  readFileWithFormatAndCancel(() => process.exit(), 'utf8', './README.md')\n)\n```"
            },
            {
              "name": "readFileWithCancel",
              "summary": "Reads `utf8` files only.",
              "lines": "```js\nimport { fork } from 'fluture'\nimport { readFile } from 'file-system'\nfork(console.warn)(console.log)(\n  readFileWithCancel(() => process.exit(), './README.md')\n)\n```"
            },
            {
              "name": "readFile",
              "summary": "Eschews any custom cancellation.",
              "lines": "```js\nimport { fork } from 'fluture'\nimport { readFile } from 'file-system'\nfork(console.warn)(console.log)(readFile('./README.md'))\n```"
            }
          ]
        },
        "keywords": [
          "@curried",
          "@example"
        ],
        "filename": "packages/file-system/fs.js"
      },
      {
        "start": 80,
        "end": 91,
        "summary": "Read a JSON file asynchronously as a Future-wrapped value, given a cancellation function",
        "links": [
          "readFile",
          "readJSONFile"
        ],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "readJSONFileWithCancel",
          "see": [
            "readFile",
            "readJSONFile"
          ],
          "example": "```js\nimport { fork } from 'fluture'\nimport { readJSONFile } from 'file-system'\nfork(console.warn)(console.log)(readJSONFile('./package.json'))\n```"
        },
        "keywords": [
          "@example",
          "@link",
          "@name",
          "@see"
        ],
        "filename": "packages/file-system/fs.js"
      },
      {
        "start": 96,
        "end": 107,
        "summary": "Read a JSON file asynchronously as a Future-wrapped value",
        "links": [
          "readFile",
          "readJSONFileWithCancel"
        ],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "readJSONFile",
          "see": [
            "readFile",
            "readJSONFileWithCancel"
          ],
          "example": "```js\nimport { fork } from 'fluture'\nimport { readJSONFile } from 'file-system'\nfork(console.warn)(console.log)(readJSONFile('./package.json'))\n```"
        },
        "keywords": [
          "@example",
          "@link",
          "@name",
          "@see"
        ],
        "filename": "packages/file-system/fs.js"
      },
      {
        "start": 110,
        "end": 126,
        "summary": "Read a glob asynchronously as a Future-wrapped value,\nwith configuration and a cancellation function.\nConfiguration is passed to [glob](https://www.npmjs.com/package/glob)",
        "links": [
          "readDirWithConfig",
          "readDir"
        ],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "readDirWithConfigAndCancel",
          "see": [
            "readDirWithConfig",
            "readDir"
          ],
          "example": "```js\nimport { fork } from 'fluture'\nimport { readDirWithConfigAndCancel } from 'file-system'\n// [...]\npipe(\n  fork(console.warn)(console.log)\n)(readDirWithConfigAndCancel(cancellationFn, { ignore: ['node_modules/**'] }, 'src/*'))\n```"
        },
        "keywords": [
          "@example",
          "@link",
          "@name",
          "@see"
        ],
        "filename": "packages/file-system/fs.js"
      },
      {
        "start": 141,
        "end": 156,
        "summary": "Read a glob asynchronously as a Future-wrapped value, with configuration.\nConfiguration is passed to [glob](https://www.npmjs.com/package/glob)",
        "links": [
          "readDirWithConfigAndCancel",
          "readDir"
        ],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "readDirWithConfig",
          "see": [
            "readDirWithConfigAndCancel",
            "readDir"
          ],
          "example": "```js\nimport { fork } from 'fluture'\nimport { readDirWithConfig } from 'file-system'\n// [...]\npipe(\n  fork(console.warn)(console.log)\n)(readDirWithConfig({ ignore: ['node_modules/**'] }, 'src/*'))\n```"
        },
        "keywords": [
          "@example",
          "@link",
          "@name",
          "@see"
        ],
        "filename": "packages/file-system/fs.js"
      },
      {
        "start": 159,
        "end": 172,
        "summary": "Read a glob asynchronously as a Future-wrapped value, default config assumed.\nConfiguration is passed to [glob](https://www.npmjs.com/package/glob)",
        "links": [
          "readDirWithConfigAndCancel",
          "readDirWithConfig"
        ],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "readDir",
          "see": [
            "readDirWithConfigAndCancel",
            "readDirWithConfig"
          ],
          "example": "```js\nimport { fork } from 'fluture'\nimport { readDir } from 'file-system'\n// [...]\nfork(console.warn)(console.log)(readDir('src/*'))\n```"
        },
        "keywords": [
          "@example",
          "@link",
          "@name",
          "@see"
        ],
        "filename": "packages/file-system/fs.js"
      },
      {
        "start": 175,
        "end": 195,
        "summary": "Write to a file, with configuration and a cancellation function.\nUnlike `fs.writeFile`, this will return the written value as a Future-wrapped value.",
        "links": [
          "writeFileWithConfig",
          "writeFile"
        ],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "writeFileWithConfigAndCancel",
          "see": [
            "writeFileWithConfig",
            "writeFile"
          ],
          "example": "```js\nimport { fork } from 'fluture'\nimport { writeFileWithConfig } from 'file-system'\n// [...]\nfork(console.warn)(console.log)(\n  writeFileWithConfigAndCancel(\n    cancellationFunction,\n    { ...fs.writeFileConfig },\n    'my-file.txt',\n    'hey I am a file'\n  )\n)\n```"
        },
        "keywords": [
          "@example",
          "@link",
          "@name",
          "@see"
        ],
        "filename": "packages/file-system/fs.js"
      },
      {
        "start": 210,
        "end": 229,
        "summary": "Write to a file, with configuration.\nUnlike `fs.writeFile`, this will return the written value as a Future-wrapped value.",
        "links": [
          "writeFileWithConfigAndCancel",
          "writeFile"
        ],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "writeFileWithConfig",
          "see": [
            "writeFileWithConfigAndCancel",
            "writeFile"
          ],
          "example": "```js\nimport { fork } from 'fluture'\nimport { writeFileWithConfig } from 'file-system'\n// [...]\nfork(console.warn)(console.log)(\n  writeFileWithConfig(\n    { encoding: 'utf8' },\n    'my-file.txt',\n    'hey I am a file'\n  )\n)\n```"
        },
        "keywords": [
          "@example",
          "@link",
          "@name",
          "@see"
        ],
        "filename": "packages/file-system/fs.js"
      },
      {
        "start": 232,
        "end": 250,
        "summary": "Write to a file, assuming `'utf8'`.\nUnlike `fs.writeFile`, this will return the written value as a Future-wrapped value.",
        "links": [
          "writeFileWithConfigAndCancel",
          "writeFileWithConfig"
        ],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "writeFile",
          "see": [
            "writeFileWithConfigAndCancel",
            "writeFileWithConfig"
          ],
          "example": "```js\nimport { fork } from 'fluture'\nimport { writeFileWithConfig } from 'file-system'\n// [...]\nfork(console.warn)(console.log)(\n  writeFileWithConfig(\n    'my-file.txt',\n    'hey I am a file'\n  )\n)\n```"
        },
        "keywords": [
          "@example",
          "@link",
          "@name",
          "@see"
        ],
        "filename": "packages/file-system/fs.js"
      },
      {
        "start": 253,
        "end": 272,
        "summary": "Remove a file, configurably, with cancellation.\nUnlike `fs.rm`, this returns the path of the deleted file as a Future-wrapped string.",
        "links": [
          "removeFileWithConfig",
          "removeFile"
        ],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "removeFileWithConfigAndCancel",
          "see": [
            "removeFileWithConfig",
            "removeFile"
          ],
          "example": "```js\nimport { fork } from 'fluture'\nimport { removeFileWithConfigAndCancel } from 'file-system'\n// [...]\nfork(console.warn)(console.log)(\n  removeFileWithConfigAndCancel(\n    cancellationFn,\n    { ...fs.removeFileConfig },\n    'my-file.txt'\n  )\n)\n```"
        },
        "keywords": [
          "@example",
          "@link",
          "@name",
          "@see"
        ],
        "filename": "packages/file-system/fs.js"
      },
      {
        "start": 280,
        "end": 298,
        "summary": "Remove a file, configurably.\nUnlike `fs.rm`, this returns the path of the deleted file as a Future-wrapped string.",
        "links": [
          "removeFileWithConfigAndCancel",
          "removeFile"
        ],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "removeFileWithConfig",
          "see": [
            "removeFileWithConfigAndCancel",
            "removeFile"
          ],
          "example": "```js\nimport { fork } from 'fluture'\nimport { removeFileWithConfig } from 'file-system'\n// [...]\nfork(console.warn)(console.log)(\n  removeFileWithConfig(\n    { ...fs.removeFileConfig },\n    'my-file.txt'\n  )\n)\n```"
        },
        "keywords": [
          "@example",
          "@link",
          "@name",
          "@see"
        ],
        "filename": "packages/file-system/fs.js"
      },
      {
        "start": 309,
        "end": 326,
        "summary": "Remove a file.\nUnlike `fs.rm`, this returns the path of the deleted file as a Future-wrapped string.",
        "links": [
          "removeFileWithConfigAndCancel",
          "removeFileWithConfig"
        ],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "removeFile",
          "see": [
            "removeFileWithConfigAndCancel",
            "removeFileWithConfig"
          ],
          "example": "```js\nimport { fork } from 'fluture'\nimport { removeFile } from 'file-system'\n// [...]\nfork(console.warn)(console.log)(\n  removeFile(\n    'my-file.txt'\n  )\n)\n```"
        },
        "keywords": [
          "@example",
          "@link",
          "@name",
          "@see"
        ],
        "filename": "packages/file-system/fs.js"
      },
      {
        "start": 329,
        "end": 347,
        "summary": "Remove multiple files, configurably, with a cancellation function.",
        "links": [
          "removeFilesWithConfig",
          "removeFiles"
        ],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "removeFilesWithConfigAndCancel",
          "see": [
            "removeFilesWithConfig",
            "removeFiles"
          ],
          "example": "```js\nimport { fork } from 'fluture'\nimport { removeFilesWithConfig } from 'file-system'\n// [...]\nfork(console.warn)(console.log)(\n  removeFilesWithConfigAndCancel(\n    cancellationFn,\n    { parallel: 30 },\n    [...list, ...of, ...thirty, ...files]\n  )\n)\n```"
        },
        "keywords": [
          "@example",
          "@link",
          "@name",
          "@see"
        ],
        "filename": "packages/file-system/fs.js"
      },
      {
        "start": 355,
        "end": 372,
        "summary": "Remove multiple files, configurably.",
        "links": [
          "removeFilesWithConfigAndCancel",
          "removeFiles"
        ],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "removeFilesWithConfig",
          "see": [
            "removeFilesWithConfigAndCancel",
            "removeFiles"
          ],
          "example": "```js\nimport { fork } from 'fluture'\nimport { DEFAULT_REMOVAL_CONFIG, removeFilesWithConfig } from 'file-system'\n// [...]\nfork(console.warn)(console.log)(\n  removeFilesWithConfig(\n    DEFAULT_REMOVAL_CONFIG,\n    [...list, ...of, ...thirty, ...files]\n  )\n)\n```"
        },
        "keywords": [
          "@example",
          "@link",
          "@name",
          "@see"
        ],
        "filename": "packages/file-system/fs.js"
      },
      {
        "start": 375,
        "end": 391,
        "summary": "Remove multiple files, configurably.",
        "links": [
          "removeFilesWithConfigAndCancel",
          "removeFiles"
        ],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "removeFilesWithConfig",
          "see": [
            "removeFilesWithConfigAndCancel",
            "removeFiles"
          ],
          "example": "```js\nimport { fork } from 'fluture'\nimport { removeFilesWithConfig } from 'file-system'\n// [...]\nfork(console.warn)(console.log)(\n  removeFilesWithConfig(\n    [...list, ...of, ...thirty, ...files]\n  )\n)\n```"
        },
        "keywords": [
          "@example",
          "@link",
          "@name",
          "@see"
        ],
        "filename": "packages/file-system/fs.js"
      },
      {
        "start": 394,
        "end": 413,
        "summary": "Make a directory, given a cancellation function.\nReturns a Future-wrapped file path as a discrete value upon success.",
        "links": [
          "mkdir",
          "mkdirp"
        ],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "mkdirWithCancel",
          "see": [
            "mkdir",
            "mkdirp"
          ],
          "example": "```js\nimport { fork } from 'fluture'\nimport { mkdirWithCancel } from 'file-system'\n// [...]\nfork(console.warn)(console.log)(\n  mkdirWithCancel(\n    () => {},\n    {},\n    'my-dir'\n  )\n)\n```"
        },
        "keywords": [
          "@example",
          "@link",
          "@name",
          "@see"
        ],
        "filename": "packages/file-system/fs.js"
      },
      {
        "start": 421,
        "end": 439,
        "summary": "Make a directory\nReturns a Future-wrapped file path as a discrete value upon success.",
        "links": [
          "mkdirWithCancel",
          "mkdirp"
        ],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "mkdir",
          "see": [
            "mkdirWithCancel",
            "mkdirp"
          ],
          "example": "```js\nimport { fork } from 'fluture'\nimport { mkdir } from 'file-system'\n// [...]\nfork(console.warn)(console.log)(\n  mkdir(\n    {},\n    'my-dir'\n  )\n)\n```"
        },
        "keywords": [
          "@example",
          "@link",
          "@name",
          "@see"
        ],
        "filename": "packages/file-system/fs.js"
      },
      {
        "start": 442,
        "end": 460,
        "summary": "Make a directory, recursively.\nReturns a Future-wrapped file path as a discrete value upon success.",
        "links": [
          "mkdirWithCancel",
          "mkdir"
        ],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "mkdirp",
          "see": [
            "mkdirWithCancel",
            "mkdir"
          ],
          "example": "```js\nimport { fork } from 'fluture'\nimport { mkdir } from 'file-system'\n// [...]\nfork(console.warn)(console.log)(\n  mkdir(\n    {},\n    'my-dir'\n  )\n)\n```"
        },
        "keywords": [
          "@example",
          "@link",
          "@name",
          "@see"
        ],
        "filename": "packages/file-system/fs.js"
      },
      {
        "start": 476,
        "end": 491,
        "summary": "Write a file to a nested folder and automatically create needed folders, akin to `mkdir -p`",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "writeFileWithAutoPath",
          "example": "```js\nimport { fork } from 'fluture'\nimport { writeFileWithAutoPath } from 'file-system'\n// [...]\nfork(console.warn)(console.log)(\n  writeFileWithAutoPath(\n    \"folders/you/must/exist/file.biz\",\n    \"my cool content\"\n  )\n)\n```"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/file-system/fs.js"
      }
    ],
    "order": 0,
    "links": [
      "readFile",
      "readJSONFile",
      "readFile",
      "readJSONFileWithCancel",
      "readDirWithConfig",
      "readDir",
      "readDirWithConfigAndCancel",
      "readDir",
      "readDirWithConfigAndCancel",
      "readDirWithConfig",
      "writeFileWithConfig",
      "writeFile",
      "writeFileWithConfigAndCancel",
      "writeFile",
      "writeFileWithConfigAndCancel",
      "writeFileWithConfig",
      "removeFileWithConfig",
      "removeFile",
      "removeFileWithConfigAndCancel",
      "removeFile",
      "removeFileWithConfigAndCancel",
      "removeFileWithConfig",
      "removeFilesWithConfig",
      "removeFiles",
      "removeFilesWithConfigAndCancel",
      "removeFiles",
      "removeFilesWithConfigAndCancel",
      "removeFiles",
      "mkdir",
      "mkdirp",
      "mkdirWithCancel",
      "mkdirp",
      "mkdirWithCancel",
      "mkdir"
    ],
    "workspace": "file-system"
  },
  {
    "slugName": "primitives",
    "pageSummary": "",
    "filename": "packages/inherent/primitives.js",
    "comments": [
      {
        "start": 2,
        "end": 18,
        "summary": "Generic comparison function.\nThis can be used to create a number of other more complex functions.",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "equalishBy",
          "example": "```js\nconst productIdSelector = z => {\n  const d = z.indexOf('-')\n  return d > -1 ? z.slice(0, d) : 'NO_MATCH'\n}\nconst isProduct = equalishBy(productIdSelector, 'coolco')\n\nconsole.log(`1. ${isProduct('coolco-10020')}`) // true\nconsole.log(`2. ${isProduct('otherco-xkswn')}`) // false\nconsole.log(`3. ${isProduct('blabbo')}`) // false\n```"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/inherent/primitives.js"
      }
    ],
    "order": 0,
    "links": [],
    "workspace": "inherent"
  },
  {
    "slugName": "kiddo",
    "pageSummary": "Call external processes and consume them as a Future-wrapped value. This is a light wrapper around `execa`, so please see [execa](https://github.com/sindresorhus/execa)'s documentation for more info.",
    "filename": "packages/kiddo/kiddo.js",
    "comments": [
      {
        "start": 7,
        "end": 10,
        "summary": "@pageSummary Call external processes and consume them as a Future-wrapped value.\nThis is a light wrapper around `execa`, so please see [execa](https://github.com/sindresorhus/execa)'s documentation for more info.",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "pageSummary": [
            "Call external processes and consume them as a Future-wrapped value.",
            "This is a light wrapper around `execa`, so please see [execa](https://github.com/sindresorhus/execa)'s documentation for more info."
          ]
        },
        "keywords": [
          "@pageSummary"
        ],
        "filename": "packages/kiddo/kiddo.js"
      },
      {
        "start": 13,
        "end": 60,
        "summary": "Consume external commands as a Future-wrapped value.",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "curried": [
            {
              "name": "execWithConfig",
              "summary": "Passes all possible configuration values plus a cancellation function.",
              "lines": "```js\nimport { execWithConfig } from 'kiddo'\nimport { fork } from 'fluture'\nfork(console.warn)(console.log)(\n  execWithConfig(\n    function customCancellationFunction() {},\n    'echo',\n    { cleanup: true },\n    ['ahoy']\n  )\n)\n```"
            },
            {
              "name": "execWithCancel",
              "summary": "Eschews any configuration and instead only expects a cancellation function, command and arguments.",
              "lines": "```js\nimport { execWithCancel } from 'kiddo'\nimport { fork } from 'fluture'\nfork(console.warn)(console.log)(\n  execWithCancel(\n    function customCancellationFunction() {},\n    'echo',\n    ['ahoy']\n  )\n)\n```"
            },
            {
              "name": "exec",
              "summary": "Eschews any configuration or cancellation function. Needs only command and arguments.",
              "lines": "```js\nimport { exec } from 'kiddo'\nimport { fork } from 'fluture'\nfork(console.warn)(console.log)(\n  exec(\n    'echo',\n    ['ahoy']\n  )\n)\n```"
            }
          ]
        },
        "keywords": [
          "@curried",
          "@example"
        ],
        "filename": "packages/kiddo/kiddo.js"
      }
    ],
    "order": 0,
    "links": [],
    "workspace": "kiddo"
  },
  {
    "slugName": "helpers",
    "pageTitle": "helpers",
    "pageSummary": "Built-in helpers for making custom plugins more robust. The \"helpers\" are the third parameter passed to a custom plugin's function.",
    "filename": "packages/monorail/helpers.js",
    "comments": [
      {
        "start": 21,
        "end": 24,
        "summary": "@pageSummary Built-in helpers for making custom plugins more robust. The \"helpers\" are the third parameter passed to a custom plugin's function.",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "pageSummary": [
            "Built-in helpers for making custom plugins more robust. The \"helpers\" are the third parameter passed to a custom plugin's function."
          ],
          "page": "helpers",
          "name": "helpers",
          "detail": 21
        },
        "keywords": [
          "@page",
          "@pageSummary"
        ],
        "filename": "packages/monorail/helpers.js"
      },
      {
        "start": 32,
        "end": 43,
        "summary": "Use this helper to test a regex that matches against any single incidence on any line",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "any",
          "example": "```js\nconst plugin = {\n  name: 'get-const',\n  fn: (state, file, { any }) => any(/const/)\n}\nexport default plugin\n```"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/monorail/helpers.js"
      },
      {
        "start": 46,
        "end": 56,
        "summary": "Use this helper to test a regex that matches and filters against every line",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "lines",
          "example": "```js\nexport default {\n  name: 'unexported-consts',\n  fn: (state, file, { lines }) => lines(/^const/)\n}\n```"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/monorail/helpers.js"
      },
      {
        "start": 61,
        "end": 71,
        "summary": "Use this helper to test a regex that matches and finds the first matching line",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "line",
          "example": "```js\nexport default {\n  name: 'exported-default',\n  fn: (state, file, { line }) => line(/export default/g)\n}\n```"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/monorail/helpers.js"
      },
      {
        "start": 76,
        "end": 86,
        "summary": "Use this helper to test a regex that matches and finds the last matching line",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "lastLine",
          "example": "```js\nexport default {\n  name: 'exported-last',\n  fn: (state, file, { lastLine }) => lastLine(/export/g)\n}\n```"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/monorail/helpers.js"
      },
      {
        "start": 91,
        "end": 101,
        "summary": "Use this helper to select content between two repeating regular expressions",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "between",
          "example": "```js\nexport default {\n  name: 'expanded-imports',\n  fn: (state, file, { between }) => between(/^import/, /from (.*)/)\n}\n```"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/monorail/helpers.js"
      },
      {
        "start": 114,
        "end": 124,
        "summary": "Use this helper to select all content between two repeating regular expressions",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "selectAll",
          "example": "```js\nexport default {\n  name: 'expanded-imports',\n  fn: (state, file, { selectAll }) => selectAll(/^import/, /from (.*)/)\n}\n```"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/monorail/helpers.js"
      },
      {
        "start": 162,
        "end": 173,
        "summary": "Use this helper to easily reduce over all lines and aggregate a value",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "reduce",
          "example": "```js\nconst plugin = {\n  name: 'select-specifics',\n  fn: (state, file, { reduce }) => reduce((agg, [line, content]) => content.length > 10 : agg.concat(content) : agg, [])\n}\nexport default plugin\n```"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/monorail/helpers.js"
      },
      {
        "start": 178,
        "end": 191,
        "summary": "Use this helper to easily filter all lines related to a given regular expression",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "filter",
          "example": "```js\nconst plugin = {\n  name: 'keyword-match',\n  fn: (state, file, { config, filter }) => filter(\n    config?.keyword ?? /monorail/\n  )\n}\nexport default plugin\n```"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/monorail/helpers.js"
      },
      {
        "start": 205,
        "end": 218,
        "summary": "The `config` value is patched in so that it is easier to pass values from the rulefile configuration to the plugins themselves, scoped to the plugin name.",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "config",
          "example": "```js\nconst plugin = {\n  name: 'keyword-match',\n  fn: (state, file, { filter, config }) => filter(\n    config?.keyword ?? /monorail/\n  )\n}\nexport default plugin\n```"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/monorail/helpers.js"
      }
    ],
    "order": 0,
    "links": [],
    "workspace": "monorail"
  }
]