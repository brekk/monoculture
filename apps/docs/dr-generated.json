[
  {
    "slugName": "executables",
    "pageSummary": "",
    "filename": "packages/bloodline/executables.js",
    "comments": [
      {
        "start": 17,
        "end": 33,
        "summary": "Check for the existence of a binary",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "checkForBinaryWithCancel",
          "example": "```js\nimport { checkForBinaryWithCancel } from 'bloodline'\nimport { fork } from 'fluture'\nfork(console.warn)(console.log)(\n  checkForBinaryWithCancel(\n    cancellationFn,\n    'gvpr',\n    ['-V'],\n    ''\n  )\n)\n```"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/bloodline/executables.js"
      },
      {
        "start": 45,
        "end": 60,
        "summary": "Check for multiple binaries in a single call",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "checkForBinaries",
          "example": "```js\nimport { checkForBinaries } from 'bloodline'\nimport { fork } from 'fluture'\nfork(console.warn)(console.log)(\n  checkForBinaries(\n    cancellationFn,\n    '/usr/bin',\n    { gvpr: ['-V'], dot: ['-V'] }\n  )\n)\n```"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/bloodline/executables.js"
      }
    ],
    "order": 0,
    "links": [],
    "workspace": "bloodline"
  },
  {
    "slugName": "tree",
    "pageSummary": "",
    "filename": "packages/bloodline/tree.js",
    "comments": [
      {
        "start": 28,
        "end": 36,
        "summary": "Generate a dependency tree, given a config, a directory, and a filename",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "plant",
          "example": "```js\nimport { plant } from 'bloodline'\nconst tree = plant({}, '../..', '../monocle/cli.js')\n```"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/bloodline/tree.js"
      },
      {
        "start": 41,
        "end": 49,
        "summary": "Test whether a path includes `'node_modules'` within it.",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "isNodeModule",
          "example": "```js\nimport { isNodeModule } from 'bloodline/tree'\nisNodeModule('./node_modules/ramda') // true\n```"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/bloodline/tree.js"
      },
      {
        "start": 63,
        "end": 71,
        "summary": "Test whether a path includes `'.git'` within it.",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "isGitPath",
          "example": "```js\nimport { isGitPath } from 'bloodline/tree'\nisGitPath('.git/config') // true\n```"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/bloodline/tree.js"
      },
      {
        "start": 107,
        "end": 118,
        "summary": "Grab an id from a cache if possible",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "getId",
          "example": "```js\nimport { getId } from 'bloodline/tree'\nconst basePath = '..'\nconst cache = {}\nconst key = 'a'\nconsole.log(getId(basePath, cache, key)) // 'bloodline/a'\n```"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/bloodline/tree.js"
      },
      {
        "start": 128,
        "end": 139,
        "summary": "Take a dependency tree and recursively walk it, returning a grouped set of dependencies.",
        "links": [
          "flattenTree"
        ],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "groupTree",
          "see": [
            "flattenTree"
          ],
          "example": "```js\nimport { groupTree, plant } from 'bloodline/tree'\nconst config = { basePath: '../..' }\nconst tree = plant(config, '..', '../monocle/cli.js')\nconst grouped = groupTree(config, {}, {}, tree)\n```"
        },
        "keywords": [
          "@example",
          "@link",
          "@name",
          "@see"
        ],
        "filename": "packages/bloodline/tree.js"
      },
      {
        "start": 205,
        "end": 216,
        "summary": "Take a dependency tree and recursively walk it, returning flattened set of dependencies.",
        "links": [
          "groupTree"
        ],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "flattenTree",
          "see": [
            "groupTree"
          ],
          "example": "```js\nimport { flattenTree, plant } from 'bloodline/tree'\nconst config = { basePath: '../..' }\nconst tree = plant(config, '..', '../monocle/cli.js')\nconst flattened = flattenTree(config, {}, {}, tree)\n```"
        },
        "keywords": [
          "@example",
          "@link",
          "@name",
          "@see"
        ],
        "filename": "packages/bloodline/tree.js"
      }
    ],
    "order": 0,
    "links": [
      "flattenTree",
      "groupTree"
    ],
    "workspace": "bloodline"
  },
  {
    "slugName": "builder",
    "pageSummary": "",
    "filename": "packages/climate/builder.js",
    "comments": [
      {
        "start": 23,
        "end": 94,
        "summary": "Automatically create many of the fundamentals needed to build robust CLI tools,\nincluding help text.",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "configurate",
          "future": true,
          "example": "```js test=true\nimport { fork } from 'fluture'\nimport stripAnsi from 'strip-ansi'\n// drgen-import-above\nconst YARGS_CONFIG = {\n  alias: {\n    meal: ['m'],\n    happyHour: ['h'],\n    multiplier: ['x'],\n  },\n  boolean: ['happyHour'],\n  number: ['multiplier'],\n  configuration: {\n    'strip-aliased': true,\n  },\n}\n *\nconst HELP_CONFIG = {\n  help: 'This text!',\n  // optional\n  color: 'Render stuff in color',\n  meal: 'Pass the name of the meal you want',\n  happyHour: 'Does happy hour apply here?',\n  multiplier: 'How many units should we apply?'\n}\n *\nconst CONFIG_DEFAULTS = {\n  color: true,\n  happyHour: false\n}\n *\nconst parseArgs = (args) => configurate(\n  YARGS_CONFIG,\n  // closured so that we can pass cwd at runtime\n  {...CONFIG_DEFAULTS, cwd: process.cwd() },\n  HELP_CONFIG,\n  { name: \"dumbwaiter\", description: \"order food!\" },\n  // process.argv.slice(2)\n  args\n)\n *\n// renders in the failure channel\nfork(x => {\n  expect(stripAnsi(x).split('\\n')).toEqual([\n    \" dumbwaiter \",\n    \"\",\n    \"order food!\",\n    \"\",\n    \"  -m / --meal\",\n    \"  \tPass the name of the meal you want\",\n    \"\",\n    \"  -h / --happyHour\",\n    \"  \tDoes happy hour apply here?\",\n    \"\",\n    \"  -x / --multiplier\",\n    \"  \tHow many units should we apply?\",\n    \"\",\n    \"  -h / --help\",\n    \"  \tThis text!\",\n  ])\n  done()\n})(done)(\n  parseArgs(['--help'])\n)\n```"
        },
        "keywords": [
          "@example",
          "@future",
          "@name"
        ],
        "filename": "packages/climate/builder.js"
      },
      {
        "start": 136,
        "end": 144,
        "summary": "The default search space when running `configFileWithCancel`.",
        "links": [
          "configFileWithCancel"
        ],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "defaultNameTemplate",
          "see": [
            "configFileWithCancel"
          ],
          "example": "```js test=true\nexpect(defaultNameTemplate('cool')).toEqual(['.coolrc', '.coolrc.json'])\n```"
        },
        "keywords": [
          "@example",
          "@link",
          "@name",
          "@see"
        ],
        "filename": "packages/climate/builder.js"
      }
    ],
    "order": 0,
    "links": [
      "configFileWithCancel"
    ],
    "workspace": "climate"
  },
  {
    "slugName": "file",
    "pageSummary": "",
    "filename": "packages/doctor-general/file.js",
    "comments": [
      {
        "start": 49,
        "end": 76,
        "summary": "Merge two file representations. Can be right or left associative",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "combineFiles",
          "param": [
            [
              "{boolean}",
              "leftToRight",
              "Associate",
              "left",
              "to",
              "right"
            ],
            [
              "{File}",
              "a",
              "left",
              "file"
            ],
            [
              "{File}",
              "b",
              "right",
              "file"
            ]
          ],
          "returns": [
            "{File}",
            "Merged",
            "file"
          ],
          "signature": [
            "boolean",
            "->",
            "File",
            "->",
            "File",
            "->",
            "File"
          ],
          "example": "```js\nconst a = { a: true, greeting: 'hello', comments: ['one', 'two'], links: ['a', 'b'] }\nconst b = { b: true, greeting: 'ahoy', comments: ['three', 'four'], links: ['c', 'd'] }\nexpect(combineFiles(true, a, b)).toEqual({\n  a: true,\n  b: true,\n  greeting: 'ahoy',\n  comments: ['one', 'two', 'three', 'four'],\n  links: ['a', 'b', 'c', 'd']\n})\nexpect(combineFiles(false, a, b)).toEqual({\n  a: true,\n  b: true,\n  greeting: 'hello',\n  comments: ['three', 'four', 'one', 'two'],\n  links: ['c', 'd', 'a', 'b']\n})\n```"
        },
        "keywords": [
          "@example",
          "@name",
          "@param",
          "@returns",
          "@signature"
        ],
        "filename": "packages/doctor-general/file.js"
      }
    ],
    "order": 0,
    "links": [],
    "workspace": "doctor-general"
  },
  {
    "slugName": "text",
    "pageSummary": "",
    "filename": "packages/doctor-general/text.js",
    "comments": [
      {
        "start": 21,
        "end": 34,
        "summary": "For strings which look like extended jsdoc comment line (e.g. ` * whatever`),\neschew the comment decoration",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "trimComment",
          "signature": [
            "String",
            "->",
            "String"
          ],
          "example": "```js\nexpect(trimComment('          * zipzop')).toEqual('zipzop')\nexpect(trimComment(' * squiggle         ')).toEqual('squiggle')\nconst input = ' ~~kljlkjlk2j32lkj3 ' + Math.round(Math.random() * 1000)\nexpect(trimComment(input)).toEqual(input)\nexpect(trimComment(29292)).toEqual(29292)\n```"
        },
        "keywords": [
          "@example",
          "@name",
          "@signature"
        ],
        "filename": "packages/doctor-general/text.js"
      }
    ],
    "order": 0,
    "links": [],
    "workspace": "doctor-general"
  },
  {
    "slugName": "fs",
    "pageSummary": "A Future-wrapped `fs` API, for future-based, lazy, easy-to-model asynchrony that makes it easy to manipulate the file system.",
    "filename": "packages/file-system/fs.js",
    "comments": [
      {
        "start": 15,
        "end": 17,
        "summary": "@pageSummary A Future-wrapped `fs` API, for future-based, lazy, easy-to-model asynchrony that makes it easy to manipulate the file system.",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "pageSummary": [
            "A Future-wrapped `fs` API, for future-based, lazy, easy-to-model asynchrony that makes it easy to manipulate the file system."
          ]
        },
        "keywords": [
          "@pageSummary"
        ],
        "filename": "packages/file-system/fs.js"
      },
      {
        "start": 27,
        "end": 36,
        "summary": "make a file string relative",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "localize",
          "example": "```js\nimport { localize } from 'file-system'\nconsole.log(`support ${localize('business')}`)\n// support ./business\n```"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/file-system/fs.js"
      },
      {
        "start": 39,
        "end": 70,
        "summary": "Read a file asynchronously as a Future-wrapped value.",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "curried": [
            {
              "name": "",
              "lines": "1. readFileWithFormatAndCancel - Can be given a file encoding and a cancellation function.\n```js\nimport { fork } from 'fluture'\nimport { readFile } from 'file-system'\nfork(console.warn)(console.log)(\nreadFileWithFormatAndCancel(() => process.exit(), 'utf8', './README.md')\n)\n```\n2. readFileWithCancel - Reads `utf8` files only.\n```js\nimport { fork } from 'fluture'\nimport { readFile } from 'file-system'\nfork(console.warn)(console.log)(\nreadFileWithCancel(() => process.exit(), './README.md')\n)\n```\n3. readFile - Eschews any custom cancellation.\n```js\nimport { fork } from 'fluture'\nimport { readFile } from 'file-system'\nfork(console.warn)(console.log)(readFile('./README.md'))\n```"
            }
          ]
        },
        "keywords": [
          "@curried",
          "@example"
        ],
        "filename": "packages/file-system/fs.js"
      },
      {
        "start": 80,
        "end": 91,
        "summary": "Read a JSON file asynchronously as a Future-wrapped value, given a cancellation function",
        "links": [
          "readFile",
          "readJSONFile"
        ],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "readJSONFileWithCancel",
          "see": [
            "readFile",
            "readJSONFile"
          ],
          "example": "```js\nimport { fork } from 'fluture'\nimport { readJSONFile } from 'file-system'\nfork(console.warn)(console.log)(readJSONFile('./package.json'))\n```"
        },
        "keywords": [
          "@example",
          "@link",
          "@name",
          "@see"
        ],
        "filename": "packages/file-system/fs.js"
      },
      {
        "start": 96,
        "end": 107,
        "summary": "Read a JSON file asynchronously as a Future-wrapped value",
        "links": [
          "readFile",
          "readJSONFileWithCancel"
        ],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "readJSONFile",
          "see": [
            "readFile",
            "readJSONFileWithCancel"
          ],
          "example": "```js\nimport { fork } from 'fluture'\nimport { readJSONFile } from 'file-system'\nfork(console.warn)(console.log)(readJSONFile('./package.json'))\n```"
        },
        "keywords": [
          "@example",
          "@link",
          "@name",
          "@see"
        ],
        "filename": "packages/file-system/fs.js"
      },
      {
        "start": 110,
        "end": 126,
        "summary": "Read a glob asynchronously as a Future-wrapped value,\nwith configuration and a cancellation function.\nConfiguration is passed to [glob](https://www.npmjs.com/package/glob)",
        "links": [
          "readDirWithConfig",
          "readDir"
        ],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "readDirWithConfigAndCancel",
          "see": [
            "readDirWithConfig",
            "readDir"
          ],
          "example": "```js\nimport { fork } from 'fluture'\nimport { readDirWithConfigAndCancel } from 'file-system'\n// [...]\npipe(\n  fork(console.warn)(console.log)\n)(readDirWithConfigAndCancel(cancellationFn, { ignore: ['node_modules/**'] }, 'src/*'))\n```"
        },
        "keywords": [
          "@example",
          "@link",
          "@name",
          "@see"
        ],
        "filename": "packages/file-system/fs.js"
      },
      {
        "start": 141,
        "end": 156,
        "summary": "Read a glob asynchronously as a Future-wrapped value, with configuration.\nConfiguration is passed to [glob](https://www.npmjs.com/package/glob)",
        "links": [
          "readDirWithConfigAndCancel",
          "readDir"
        ],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "readDirWithConfig",
          "see": [
            "readDirWithConfigAndCancel",
            "readDir"
          ],
          "example": "```js\nimport { fork } from 'fluture'\nimport { readDirWithConfig } from 'file-system'\n// [...]\npipe(\n  fork(console.warn)(console.log)\n)(readDirWithConfig({ ignore: ['node_modules/**'] }, 'src/*'))\n```"
        },
        "keywords": [
          "@example",
          "@link",
          "@name",
          "@see"
        ],
        "filename": "packages/file-system/fs.js"
      },
      {
        "start": 159,
        "end": 172,
        "summary": "Read a glob asynchronously as a Future-wrapped value, default config assumed.\nConfiguration is passed to [glob](https://www.npmjs.com/package/glob)",
        "links": [
          "readDirWithConfigAndCancel",
          "readDirWithConfig"
        ],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "readDir",
          "see": [
            "readDirWithConfigAndCancel",
            "readDirWithConfig"
          ],
          "example": "```js\nimport { fork } from 'fluture'\nimport { readDir } from 'file-system'\n// [...]\nfork(console.warn)(console.log)(readDir('src/*'))\n```"
        },
        "keywords": [
          "@example",
          "@link",
          "@name",
          "@see"
        ],
        "filename": "packages/file-system/fs.js"
      },
      {
        "start": 175,
        "end": 195,
        "summary": "Write to a file, with configuration and a cancellation function.\nUnlike `fs.writeFile`, this will return the written value as a Future-wrapped value.",
        "links": [
          "writeFileWithConfig",
          "writeFile"
        ],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "writeFileWithConfigAndCancel",
          "see": [
            "writeFileWithConfig",
            "writeFile"
          ],
          "example": "```js\nimport { fork } from 'fluture'\nimport { writeFileWithConfig } from 'file-system'\n// [...]\nfork(console.warn)(console.log)(\n  writeFileWithConfigAndCancel(\n    cancellationFunction,\n    { ...fs.writeFileConfig },\n    'my-file.txt',\n    'hey I am a file'\n  )\n)\n```"
        },
        "keywords": [
          "@example",
          "@link",
          "@name",
          "@see"
        ],
        "filename": "packages/file-system/fs.js"
      },
      {
        "start": 210,
        "end": 229,
        "summary": "Write to a file, with configuration.\nUnlike `fs.writeFile`, this will return the written value as a Future-wrapped value.",
        "links": [
          "writeFileWithConfigAndCancel",
          "writeFile"
        ],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "writeFileWithConfig",
          "see": [
            "writeFileWithConfigAndCancel",
            "writeFile"
          ],
          "example": "```js\nimport { fork } from 'fluture'\nimport { writeFileWithConfig } from 'file-system'\n// [...]\nfork(console.warn)(console.log)(\n  writeFileWithConfig(\n    { encoding: 'utf8' },\n    'my-file.txt',\n    'hey I am a file'\n  )\n)\n```"
        },
        "keywords": [
          "@example",
          "@link",
          "@name",
          "@see"
        ],
        "filename": "packages/file-system/fs.js"
      },
      {
        "start": 232,
        "end": 250,
        "summary": "Write to a file, assuming `'utf8'`.\nUnlike `fs.writeFile`, this will return the written value as a Future-wrapped value.",
        "links": [
          "writeFileWithConfigAndCancel",
          "writeFileWithConfig"
        ],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "writeFile",
          "see": [
            "writeFileWithConfigAndCancel",
            "writeFileWithConfig"
          ],
          "example": "```js\nimport { fork } from 'fluture'\nimport { writeFileWithConfig } from 'file-system'\n// [...]\nfork(console.warn)(console.log)(\n  writeFileWithConfig(\n    'my-file.txt',\n    'hey I am a file'\n  )\n)\n```"
        },
        "keywords": [
          "@example",
          "@link",
          "@name",
          "@see"
        ],
        "filename": "packages/file-system/fs.js"
      },
      {
        "start": 253,
        "end": 301,
        "summary": "Remove a file, configurably, with cancellation.\nUnlike `fs.rm`, this returns the path of the deleted file as a Future-wrapped string.",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "curried": [
            {
              "name": "",
              "lines": "1. removeFileWithConfigAndCancel - Configuration and cancellation\n```js\nimport { fork } from 'fluture'\nimport { removeFileWithConfigAndCancel } from 'file-system'\nfork(console.warn)(console.log)(\nremoveFileWithConfigAndCancel(\ncancellationFn,\n{ ...fs.removeFileConfig },\n'my-file.txt'\n)\n)\n```\n2. removeFileWithConfig - No config, just cancellation\n```js\nimport { fork } from 'fluture'\nimport { removeFileWithConfig } from 'file-system'\n// [...]\nfork(console.warn)(console.log)(\nremoveFileWithConfig(\n{ ...fs.removeFileConfig },\n'my-file.txt'\n)\n)\n```\n3. removeFile - remove a file. Aliased to `rm`.\n```js\nimport { fork } from 'fluture'\nimport { removeFile } from 'file-system'\n// [...]\nfork(console.warn)(console.log)(\nremoveFile(\n'my-file.txt'\n)\n)\n```"
            }
          ]
        },
        "keywords": [
          "@curried",
          "@example"
        ],
        "filename": "packages/file-system/fs.js"
      },
      {
        "start": 321,
        "end": 339,
        "summary": "Remove multiple files, configurably, with a cancellation function.",
        "links": [
          "removeFilesWithConfig",
          "removeFiles"
        ],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "removeFilesWithConfigAndCancel",
          "see": [
            "removeFilesWithConfig",
            "removeFiles"
          ],
          "example": "```js\nimport { fork } from 'fluture'\nimport { removeFilesWithConfig } from 'file-system'\n// [...]\nfork(console.warn)(console.log)(\n  removeFilesWithConfigAndCancel(\n    cancellationFn,\n    { parallel: 30 },\n    [...list, ...of, ...thirty, ...files]\n  )\n)\n```"
        },
        "keywords": [
          "@example",
          "@link",
          "@name",
          "@see"
        ],
        "filename": "packages/file-system/fs.js"
      },
      {
        "start": 347,
        "end": 364,
        "summary": "Remove multiple files, configurably.",
        "links": [
          "removeFilesWithConfigAndCancel",
          "removeFiles"
        ],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "removeFilesWithConfig",
          "see": [
            "removeFilesWithConfigAndCancel",
            "removeFiles"
          ],
          "example": "```js\nimport { fork } from 'fluture'\nimport { DEFAULT_REMOVAL_CONFIG, removeFilesWithConfig } from 'file-system'\n// [...]\nfork(console.warn)(console.log)(\n  removeFilesWithConfig(\n    DEFAULT_REMOVAL_CONFIG,\n    [...list, ...of, ...thirty, ...files]\n  )\n)\n```"
        },
        "keywords": [
          "@example",
          "@link",
          "@name",
          "@see"
        ],
        "filename": "packages/file-system/fs.js"
      },
      {
        "start": 367,
        "end": 383,
        "summary": "Remove multiple files, configurably.",
        "links": [
          "removeFilesWithConfigAndCancel",
          "removeFiles"
        ],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "removeFilesWithConfig",
          "see": [
            "removeFilesWithConfigAndCancel",
            "removeFiles"
          ],
          "example": "```js\nimport { fork } from 'fluture'\nimport { removeFilesWithConfig } from 'file-system'\n// [...]\nfork(console.warn)(console.log)(\n  removeFilesWithConfig(\n    [...list, ...of, ...thirty, ...files]\n  )\n)\n```"
        },
        "keywords": [
          "@example",
          "@link",
          "@name",
          "@see"
        ],
        "filename": "packages/file-system/fs.js"
      },
      {
        "start": 386,
        "end": 405,
        "summary": "Make a directory, given a cancellation function.\nReturns a Future-wrapped file path as a discrete value upon success.",
        "links": [
          "mkdir",
          "mkdirp"
        ],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "mkdirWithCancel",
          "see": [
            "mkdir",
            "mkdirp"
          ],
          "example": "```js\nimport { fork } from 'fluture'\nimport { mkdirWithCancel } from 'file-system'\n// [...]\nfork(console.warn)(console.log)(\n  mkdirWithCancel(\n    () => {},\n    {},\n    'my-dir'\n  )\n)\n```"
        },
        "keywords": [
          "@example",
          "@link",
          "@name",
          "@see"
        ],
        "filename": "packages/file-system/fs.js"
      },
      {
        "start": 413,
        "end": 431,
        "summary": "Make a directory\nReturns a Future-wrapped file path as a discrete value upon success.",
        "links": [
          "mkdirWithCancel",
          "mkdirp"
        ],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "mkdir",
          "see": [
            "mkdirWithCancel",
            "mkdirp"
          ],
          "example": "```js\nimport { fork } from 'fluture'\nimport { mkdir } from 'file-system'\n// [...]\nfork(console.warn)(console.log)(\n  mkdir(\n    {},\n    'my-dir'\n  )\n)\n```"
        },
        "keywords": [
          "@example",
          "@link",
          "@name",
          "@see"
        ],
        "filename": "packages/file-system/fs.js"
      },
      {
        "start": 434,
        "end": 452,
        "summary": "Make a directory, recursively.\nReturns a Future-wrapped file path as a discrete value upon success.",
        "links": [
          "mkdirWithCancel",
          "mkdir"
        ],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "mkdirp",
          "see": [
            "mkdirWithCancel",
            "mkdir"
          ],
          "example": "```js\nimport { fork } from 'fluture'\nimport { mkdir } from 'file-system'\n// [...]\nfork(console.warn)(console.log)(\n  mkdir(\n    {},\n    'my-dir'\n  )\n)\n```"
        },
        "keywords": [
          "@example",
          "@link",
          "@name",
          "@see"
        ],
        "filename": "packages/file-system/fs.js"
      },
      {
        "start": 468,
        "end": 483,
        "summary": "Write a file to a nested folder and automatically create needed folders, akin to `mkdir -p`",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "writeFileWithAutoPath",
          "example": "```js\nimport { fork } from 'fluture'\nimport { writeFileWithAutoPath } from 'file-system'\n// [...]\nfork(console.warn)(console.log)(\n  writeFileWithAutoPath(\n    \"folders/you/must/exist/file.biz\",\n    \"my cool content\"\n  )\n)\n```"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/file-system/fs.js"
      }
    ],
    "order": 0,
    "links": [
      "readFile",
      "readJSONFile",
      "readFile",
      "readJSONFileWithCancel",
      "readDirWithConfig",
      "readDir",
      "readDirWithConfigAndCancel",
      "readDir",
      "readDirWithConfigAndCancel",
      "readDirWithConfig",
      "writeFileWithConfig",
      "writeFile",
      "writeFileWithConfigAndCancel",
      "writeFile",
      "writeFileWithConfigAndCancel",
      "writeFileWithConfig",
      "removeFilesWithConfig",
      "removeFiles",
      "removeFilesWithConfigAndCancel",
      "removeFiles",
      "removeFilesWithConfigAndCancel",
      "removeFiles",
      "mkdir",
      "mkdirp",
      "mkdirWithCancel",
      "mkdirp",
      "mkdirWithCancel",
      "mkdir"
    ],
    "workspace": "file-system"
  },
  {
    "slugName": "primitives",
    "pageSummary": "",
    "filename": "packages/inherent/primitives.js",
    "comments": [
      {
        "start": 2,
        "end": 18,
        "summary": "Generic comparison function.\nThis can be used to create a number of other more complex functions.",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "equalishBy",
          "example": "```js test=true\nconst productIdSelector = z => {\n  const d = z.indexOf('-')\n  return d > -1 ? z.slice(0, d) : 'NO_MATCH'\n}\nconst isProduct = equalishBy(productIdSelector, 'coolco')\n *\nexpect(isProduct('coolco-10020')).toBeTruthy()\nexpect(isProduct('otherco-xkswn')).toBeFalsy()\nexpect(isProduct('blabbo')).toBeFalsy()\n```"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/inherent/primitives.js"
      },
      {
        "start": 35,
        "end": 47,
        "summary": "Coerce values to boolean explicitly",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "coerce",
          "param": [
            "{any}",
            "x",
            "Any",
            "value"
          ],
          "returns": "boolean",
          "example": "```js test=true\nexpect(coerce(0)).toBeFalsy()\nexpect(coerce('')).toBeFalsy()\nexpect(coerce([])).toBeTruthy()\nexpect(coerce(1)).toBeTruthy()\n```"
        },
        "keywords": [
          "@example",
          "@name",
          "@param",
          "@returns"
        ],
        "filename": "packages/inherent/primitives.js"
      }
    ],
    "order": 0,
    "links": [],
    "workspace": "inherent"
  },
  {
    "slugName": "kiddo",
    "pageSummary": "Call external processes and consume them as a Future-wrapped value. This is a light wrapper around `execa`, so please see [execa](https://github.com/sindresorhus/execa)'s documentation for more info.",
    "filename": "packages/kiddo/kiddo.js",
    "comments": [
      {
        "start": 10,
        "end": 13,
        "summary": "@pageSummary Call external processes and consume them as a Future-wrapped value.\nThis is a light wrapper around `execa`, so please see [execa](https://github.com/sindresorhus/execa)'s documentation for more info.",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "pageSummary": [
            "Call external processes and consume them as a Future-wrapped value.",
            "This is a light wrapper around `execa`, so please see [execa](https://github.com/sindresorhus/execa)'s documentation for more info."
          ]
        },
        "keywords": [
          "@pageSummary"
        ],
        "filename": "packages/kiddo/kiddo.js"
      },
      {
        "start": 16,
        "end": 63,
        "summary": "Consume external commands as a Future-wrapped value.",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "curried": [
            {
              "name": "",
              "lines": "1. execWithConfig - Passes all possible configuration values plus a cancellation function.\n```js\nimport { execWithConfig } from 'kiddo'\nimport { fork } from 'fluture'\nfork(console.warn)(console.log)(\nexecWithConfig(\nfunction customCancellationFunction() {},\n'echo',\n{ cleanup: true },\n['ahoy']\n)\n)\n```\n2. execWithCancel - Eschews any configuration and instead only expects a cancellation function, command and arguments.\n```js\nimport { execWithCancel } from 'kiddo'\nimport { fork } from 'fluture'\nfork(console.warn)(console.log)(\nexecWithCancel(\nfunction customCancellationFunction() {},\n'echo',\n['ahoy']\n)\n)\n```\n3. exec - Eschews any configuration or cancellation function. Needs only command and arguments.\n```js\nimport { exec } from 'kiddo'\nimport { fork } from 'fluture'\nfork(console.warn)(console.log)(\nexec(\n'echo',\n['ahoy']\n)\n)\n```"
            }
          ]
        },
        "keywords": [
          "@curried",
          "@example"
        ],
        "filename": "packages/kiddo/kiddo.js"
      }
    ],
    "order": 0,
    "links": [],
    "workspace": "kiddo"
  },
  {
    "slugName": "knot",
    "pageSummary": "",
    "filename": "packages/knot/knot.js",
    "comments": [
      {
        "start": 39,
        "end": 51,
        "summary": "Slice a string by counted delimiters",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "nthIndex",
          "example": "```js test=true\nexpect(\n  nthIndex('/', -5, 'a/b/c/d/e/f/g/h/i/j')\n).toEqual(\"f/g/h/i/j\")\nexpect(\n  nthIndex('/', 5, 'a/b/c/d/e/f/g/h/i/j')\n).toEqual(\"a/b/c/d/e\")\n```"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/knot/knot.js"
      },
      {
        "start": 56,
        "end": 64,
        "summary": "A simple memoized utility for repeating a string and joining the array.",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "strepeat",
          "example": "```js test=true\nexpect(strepeat('=', 5)).toEqual('=====')\nexpect(strepeat('/', -1)).toEqual('')\n```"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/knot/knot.js"
      },
      {
        "start": 69,
        "end": 77,
        "summary": "Capitalize a string",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "capitalize",
          "example": "```js test=true\nexpect(capitalize(\"nice\")).toEqual(\"Nice\")\nexpect(capitalize(\"\")).toEqual(\"\")\n```"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/knot/knot.js"
      }
    ],
    "order": 0,
    "links": [],
    "workspace": "knot"
  },
  {
    "slugName": "helpers",
    "pageTitle": "helpers",
    "pageSummary": "Built-in helpers for making custom plugins more robust. The \"helpers\" are the third parameter passed to a custom plugin's function.",
    "filename": "packages/monorail/helpers.js",
    "comments": [
      {
        "start": 22,
        "end": 25,
        "summary": "@pageSummary Built-in helpers for making custom plugins more robust. The \"helpers\" are the third parameter passed to a custom plugin's function.",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "pageSummary": [
            "Built-in helpers for making custom plugins more robust. The \"helpers\" are the third parameter passed to a custom plugin's function."
          ],
          "page": "helpers",
          "name": "helpers",
          "detail": 22
        },
        "keywords": [
          "@page",
          "@pageSummary"
        ],
        "filename": "packages/monorail/helpers.js"
      },
      {
        "start": 33,
        "end": 44,
        "summary": "Use this helper to test a regex that matches against any single incidence on any line",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "any",
          "example": "```js\nconst plugin = {\n  name: 'get-const',\n  fn: (state, file, { any }) => any(/const/)\n}\nexport default plugin\n```"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/monorail/helpers.js"
      },
      {
        "start": 47,
        "end": 57,
        "summary": "Use this helper to test a regex that matches and filters against every line",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "lines",
          "example": "```js\nexport default {\n  name: 'unexported-consts',\n  fn: (state, file, { lines }) => lines(/^const/)\n}\n```"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/monorail/helpers.js"
      },
      {
        "start": 62,
        "end": 72,
        "summary": "Use this helper to test a regex that matches and finds the first matching line",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "line",
          "example": "```js\nexport default {\n  name: 'exported-default',\n  fn: (state, file, { line }) => line(/export default/g)\n}\n```"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/monorail/helpers.js"
      },
      {
        "start": 77,
        "end": 87,
        "summary": "Use this helper to test a regex that matches and finds the last matching line",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "lastLine",
          "example": "```js\nexport default {\n  name: 'exported-last',\n  fn: (state, file, { lastLine }) => lastLine(/export/g)\n}\n```"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/monorail/helpers.js"
      },
      {
        "start": 92,
        "end": 102,
        "summary": "Use this helper to select content between two repeating regular expressions",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "between",
          "example": "```js\nexport default {\n  name: 'expanded-imports',\n  fn: (state, file, { between }) => between(/^import/, /from (.*)/)\n}\n```"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/monorail/helpers.js"
      },
      {
        "start": 115,
        "end": 125,
        "summary": "Use this helper to select all content between two repeating regular expressions",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "selectAll",
          "example": "```js\nexport default {\n  name: 'expanded-imports',\n  fn: (state, file, { selectAll }) => selectAll(/^import/, /from (.*)/)\n}\n```"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/monorail/helpers.js"
      },
      {
        "start": 163,
        "end": 174,
        "summary": "Use this helper to easily reduce over all lines and aggregate a value",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "reduce",
          "example": "```js\nconst plugin = {\n  name: 'select-specifics',\n  fn: (state, file, { reduce }) => reduce((agg, [line, content]) => content.length > 10 : agg.concat(content) : agg, [])\n}\nexport default plugin\n```"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/monorail/helpers.js"
      },
      {
        "start": 179,
        "end": 192,
        "summary": "Use this helper to easily filter all lines related to a given regular expression",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "filter",
          "example": "```js\nconst plugin = {\n  name: 'keyword-match',\n  fn: (state, file, { config, filter }) => filter(\n    config?.keyword ?? /monorail/\n  )\n}\nexport default plugin\n```"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/monorail/helpers.js"
      },
      {
        "start": 206,
        "end": 219,
        "summary": "The `config` value is patched in so that it is easier to pass values from the rulefile configuration to the plugins themselves, scoped to the plugin name.",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "config",
          "example": "```js\nconst plugin = {\n  name: 'keyword-match',\n  fn: (state, file, { filter, config }) => filter(\n    config?.keyword ?? /monorail/\n  )\n}\nexport default plugin\n```"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/monorail/helpers.js"
      }
    ],
    "order": 0,
    "links": [],
    "workspace": "monorail"
  },
  {
    "slugName": "summary",
    "pageSummary": "",
    "filename": "tools/digested/summary.js",
    "comments": [
      {
        "start": 87,
        "end": 157,
        "summary": "Summarize a project, given:\n - the path to a `package.json` file\n - the path to a `dr-generated.json` file\n - the URI of a documentation site\n - the URI of a repository\n - (optional) a banner\n - or (optional) the path to a file which represents a banner",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "summarize",
          "future": true,
          "example": "```js test=true\nimport path from 'node:path'\nimport { fork } from 'fluture'\n// drgen-import-above\nfork(done)(x => {\n  expect(x.split('\\n')).toEqual([\n    \"this is a cool test!\",\n    \"## apps\",\n    \"\",\n    \" * [docs](//repo.biz/apps/docs) - documentation site for monoculture\",\n    \"\",\n    \"## packages\",\n    \"\",\n    \" * [bloodline](//repo.biz/packages/bloodline) - determine the relationships between files 🩸\",\n    \" * [climate](//repo.biz/packages/climate) - CLI utilities, friend 👯\",\n    \" * [climate-json](//repo.biz/packages/climate-json) - JSON parser for climate 🐐\",\n    \" * [climate-toml](//repo.biz/packages/climate-toml) - TOML parser for climate 🍅\",\n    \" * [climate-yaml](//repo.biz/packages/climate-yaml) - YAML parser for climate 🍠\",\n    \" * [clox](//repo.biz/packages/clox) - boxes for the terminal ⏰\",\n    \" * [doctor-general](//repo.biz/packages/doctor-general) - documentation generation 🩻\",\n    \" * [file-system](//repo.biz/packages/file-system) - fs, but in the future 🔮\",\n    \" * [inherent](//repo.biz/packages/inherent) - functional utilities for primitives ⛺️\",\n    \" * [kiddo](//repo.biz/packages/kiddo) - child processes in the future 👶\",\n    \" * [knot](//repo.biz/packages/knot) - functional utilities for strings 🪢\",\n    \" * [monocle](//repo.biz/packages/monocle) - inspect code and apply rules, magically 🧐\",\n    \" * [monorail](//repo.biz/packages/monorail) - plugins for smug grins 🚂\",\n    \" * [robot-tourist](//repo.biz/packages/robot-tourist) - human-centric source code interpreter 🤖\",\n    \" * [water-wheel](//repo.biz/packages/water-wheel) - future-wrapping for streaming interfaces 🌊\",\n    \"\",\n    \"## shared\",\n    \"\",\n    \" * [eslint-config-monoculture](//repo.biz/shared/eslint-config-monoculture) - shared eslint configuration for monoculture packages 🧹\",\n    \" * [jest-config](//repo.biz/shared/jest-config) - shared jest configuration for monoculture packages 🎪\",\n    \" * [monoculture-tsconfig](//repo.biz/shared/monoculture-tsconfig) - shared tsconfig for monoculture packages 😵\",\n    \"\",\n    \"## tools\",\n    \"\",\n    \" * [digested](//repo.biz/tools/digested) - summarize and automatically generate information about your projects 🍽️\",\n    \" * [doctor-general-cli](//repo.biz/tools/doctor-general-cli) - documentation generation in a nice CLI 🫡\",\n    \" * [gitparty](//repo.biz/tools/gitparty) - visualize git logs with magical context 🎨\",\n    \" * [spacework](//repo.biz/tools/spacework) - meta tools for monoculture ☄️\",\n    \" * [superorganism](//repo.biz/tools/superorganism) - script runner from beyond the moon 🦠\",\n    \" * [treacle](//repo.biz/tools/treacle) - command line interface tree visualization pun 🫠\",\n    \"\",\n  ])\n  done()\n})(summarize({\n  readme: true,\n  dirPath: process.cwd(),\n  banner: 'this is a cool test!',\n  // repoUrl: 'https://github.com/brekk/monoculture/tree/main',\n  // docUrl: 'https://brekk.github.io/monoculture',\n  // base package only!\n  repoUrl: '//repo.biz',\n  docUrl: '//repo.doc',\n  pkgPath: '../../package.json',\n  drGenPath: '../../apps/docs/dr-generated.json'\n}))\n```"
        },
        "keywords": [
          "@example",
          "@future",
          "@name"
        ],
        "filename": "tools/digested/summary.js"
      }
    ],
    "order": 0,
    "links": [],
    "workspace": "digested"
  }
]