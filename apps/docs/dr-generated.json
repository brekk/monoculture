[
  {
    "package": "docs",
    "slugName": "next.config",
    "filename": "apps/docs/next.config.js",
    "pageTitle": "",
    "pageSummary": "",
    "comments": [
      {
        "start": 0,
        "end": 0,
        "summary": "/** @type {import('next').NextConfig} */",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "description": "/** @type {import('next').NextConfig} */"
        },
        "keywords": [],
        "filename": "apps/docs/next.config.js",
        "package": "docs"
      }
    ],
    "order": 0,
    "links": [],
    "workspace": "docs"
  },
  {
    "package": "bloodline",
    "slugName": "executables",
    "filename": "packages/bloodline/executables.js",
    "pageTitle": "",
    "pageSummary": "",
    "comments": [
      {
        "start": 17,
        "end": 33,
        "summary": "Check for the existence of a binary",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "checkForBinaryWithCancel",
          "example": [
            "```js",
            "import { checkForBinaryWithCancel } from 'bloodline'",
            "import { fork } from 'fluture'",
            "fork(console.warn)(console.log)(",
            "  checkForBinaryWithCancel(",
            "    cancellationFn,",
            "    'gvpr',",
            "    ['-V'],",
            "    ''",
            "  )",
            ")",
            "```"
          ],
          "description": "Check for the existence of a binary"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/bloodline/executables.js",
        "package": "bloodline"
      },
      {
        "start": 46,
        "end": 61,
        "summary": "Check for multiple binaries in a single call",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "checkForBinaries",
          "example": [
            "```js",
            "import { checkForBinaries } from 'bloodline'",
            "import { fork } from 'fluture'",
            "fork(console.warn)(console.log)(",
            "  checkForBinaries(",
            "    cancellationFn,",
            "    '/usr/bin',",
            "    { gvpr: ['-V'], dot: ['-V'] }",
            "  )",
            ")",
            "```"
          ],
          "description": "Check for multiple binaries in a single call"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/bloodline/executables.js",
        "package": "bloodline"
      }
    ],
    "order": 0,
    "links": [],
    "workspace": "bloodline"
  },
  {
    "package": "bloodline",
    "slugName": "tree",
    "filename": "packages/bloodline/tree.js",
    "pageTitle": "",
    "pageSummary": "",
    "comments": [
      {
        "start": 28,
        "end": 36,
        "summary": "Generate a dependency tree, given a config, a directory, and a filename",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "plant",
          "example": [
            "```js",
            "import { plant } from 'bloodline'",
            "const tree = plant({}, '../..', '../monocle/cli.js')",
            "```"
          ],
          "description": "Generate a dependency tree, given a config, a directory, and a filename"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/bloodline/tree.js",
        "package": "bloodline"
      },
      {
        "start": 41,
        "end": 49,
        "summary": "Test whether a path includes `'node_modules'` within it.",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "isNodeModule",
          "example": [
            "```js",
            "import { isNodeModule } from 'bloodline/tree'",
            "isNodeModule('./node_modules/ramda') // true",
            "```"
          ],
          "description": "Test whether a path includes `'node_modules'` within it."
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/bloodline/tree.js",
        "package": "bloodline"
      },
      {
        "start": 63,
        "end": 71,
        "summary": "Test whether a path includes `'.git'` within it.",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "isGitPath",
          "example": [
            "```js",
            "import { isGitPath } from 'bloodline/tree'",
            "isGitPath('.git/config') // true",
            "```"
          ],
          "description": "Test whether a path includes `'.git'` within it."
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/bloodline/tree.js",
        "package": "bloodline"
      },
      {
        "start": 109,
        "end": 120,
        "summary": "Grab an id from a cache if possible",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "getId",
          "example": [
            "```js",
            "import { getId } from 'bloodline/tree'",
            "const basePath = '..'",
            "const cache = {}",
            "const key = 'a'",
            "console.log(getId(basePath, cache, key)) // 'bloodline/a'",
            "```"
          ],
          "description": "Grab an id from a cache if possible"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/bloodline/tree.js",
        "package": "bloodline"
      },
      {
        "start": 130,
        "end": 142,
        "summary": "Take a dependency tree and recursively walk it, returning a grouped set of dependencies.",
        "links": [
          "flattenTree"
        ],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "groupTree",
          "see": "{@link flattenTree}",
          "example": [
            "```js",
            "import { plant } from 'bloodline'",
            "// drgen-import-above",
            "const config = { basePath: '../..' }",
            "const tree = plant(config, '..', '../monocle/cli.js')",
            "const grouped = groupTree(config, {}, {}, tree)",
            "```"
          ],
          "description": "Take a dependency tree and recursively walk it, returning a grouped set of dependencies."
        },
        "keywords": [
          "@example",
          "@link",
          "@name",
          "@see"
        ],
        "filename": "packages/bloodline/tree.js",
        "package": "bloodline"
      },
      {
        "start": 215,
        "end": 227,
        "summary": "Take a dependency tree and recursively walk it, returning flattened set of dependencies.",
        "links": [
          "groupTree"
        ],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "flattenTree",
          "see": "{@link groupTree}",
          "example": [
            "```js",
            "import { plant } from 'bloodline'",
            "// drgen-import-above",
            "const config = { basePath: '../..' }",
            "const tree = plant(config, '..', '../monocle/cli.js')",
            "const flattened = flattenTree(config, {}, {}, tree)",
            "```"
          ],
          "description": "Take a dependency tree and recursively walk it, returning flattened set of dependencies."
        },
        "keywords": [
          "@example",
          "@link",
          "@name",
          "@see"
        ],
        "filename": "packages/bloodline/tree.js",
        "package": "bloodline"
      }
    ],
    "order": 0,
    "links": [
      "flattenTree",
      "groupTree"
    ],
    "workspace": "bloodline"
  },
  {
    "package": "climate",
    "slugName": "builder",
    "filename": "packages/climate/builder.js",
    "pageTitle": "",
    "pageSummary": "",
    "comments": [
      {
        "start": 23,
        "end": 94,
        "summary": "Automatically create many of the fundamentals needed to build robust CLI tools, including help text.",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "configurate",
          "future": true,
          "example": [
            "```js test=true",
            "import { fork } from 'fluture'",
            "import stripAnsi from 'strip-ansi'",
            "// drgen-import-above",
            "const YARGS_CONFIG = {",
            "  alias: {",
            "    meal: ['m'],",
            "    happyHour: ['h'],",
            "    multiplier: ['x'],",
            "  },",
            "  boolean: ['happyHour'],",
            "  number: ['multiplier'],",
            "  configuration: {",
            "    'strip-aliased': true,",
            "  },",
            "}",
            "const HELP_CONFIG = {",
            "  help: 'This text!',",
            "  // optional",
            "  color: 'Render stuff in color',",
            "  meal: 'Pass the name of the meal you want',",
            "  happyHour: 'Does happy hour apply here?',",
            "  multiplier: 'How many units should we apply?'",
            "}",
            "const CONFIG_DEFAULTS = {",
            "  color: true,",
            "  happyHour: false",
            "}",
            "const parseArgs = (args) => configurate(",
            "  YARGS_CONFIG,",
            "  // closured so that we can pass cwd at runtime",
            "  {...CONFIG_DEFAULTS, cwd: process.cwd() },",
            "  HELP_CONFIG,",
            "  { name: \"dumbwaiter\", description: \"order food!\" },",
            "  // process.argv.slice(2)",
            "  args",
            ")",
            "// renders in the failure channel",
            "fork(x => {",
            "  expect(stripAnsi(x).split('\\n').map(z => z.trim())).toEqual([",
            "    \"dumbwaiter\",",
            "    \"\",",
            "    \"order food!\",",
            "    \"\",",
            "    \"-m / --meal\",",
            "    \"Pass the name of the meal you want\",",
            "    \"\",",
            "    \"-h / --happyHour\",",
            "    \"Does happy hour apply here?\",",
            "    \"\",",
            "    \"-x / --multiplier\",",
            "    \"How many units should we apply?\",",
            "    \"\",",
            "    \"-h / --help\",",
            "    \"This text!\",",
            "  ])",
            "  done()",
            "})(done)(",
            "  parseArgs(['--help'])",
            ")",
            "```"
          ],
          "description": "Automatically create many of the fundamentals needed to build robust CLI tools, including help text."
        },
        "keywords": [
          "@example",
          "@future",
          "@name"
        ],
        "filename": "packages/climate/builder.js",
        "package": "climate"
      },
      {
        "start": 138,
        "end": 146,
        "summary": "The default search space when running `configFileWithCancel`.",
        "links": [
          "configFileWithCancel"
        ],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "defaultNameTemplate",
          "see": "{@link configFileWithCancel}",
          "example": [
            "```js test=true",
            "expect(defaultNameTemplate('cool')).toEqual(['.coolrc', '.coolrc.json'])",
            "```"
          ],
          "description": "The default search space when running `configFileWithCancel`."
        },
        "keywords": [
          "@example",
          "@link",
          "@name",
          "@see"
        ],
        "filename": "packages/climate/builder.js",
        "package": "climate"
      }
    ],
    "order": 0,
    "links": [
      "configFileWithCancel"
    ],
    "workspace": "climate"
  },
  {
    "package": "doctor-general-jest",
    "slugName": "comment-test",
    "filename": "packages/doctor-general-jest/comment-test.js",
    "pageTitle": "",
    "pageSummary": "",
    "comments": [
      {
        "start": 21,
        "end": 49,
        "summary": "Merge two file representations. Can be right or left associative",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "combineFiles",
          "exported": true,
          "param": [
            "{boolean} leftToRight Associate left to right",
            "{File} a left file",
            "{File} b right file"
          ],
          "returns": "{File} Merged file",
          "signature": "boolean -> File -> File -> File",
          "example": [
            "```js",
            "const a = { a: true, greeting: 'hello', comments: ['one', 'two'], links: ['a', 'b'] }",
            "const b = { b: true, greeting: 'ahoy', comments: ['three', 'four'], links: ['c', 'd'] }",
            "expect(combineFiles(true, a, b)).toEqual({",
            "  a: true,",
            "  b: true,",
            "  greeting: 'ahoy',",
            "  comments: ['one', 'two', 'three', 'four'],",
            "  links: ['a', 'b', 'c', 'd']",
            "})",
            "expect(combineFiles(false, a, b)).toEqual({",
            "  a: true,",
            "  b: true,",
            "  greeting: 'hello',",
            "  comments: ['three', 'four', 'one', 'two'],",
            "  links: ['c', 'd', 'a', 'b']",
            "})",
            "```"
          ],
          "description": "Merge two file representations. Can be right or left associative"
        },
        "keywords": [
          "@example",
          "@exported",
          "@name",
          "@param",
          "@returns",
          "@signature"
        ],
        "filename": "packages/doctor-general-jest/comment-test.js",
        "package": "doctor-general-jest"
      }
    ],
    "order": 0,
    "links": [],
    "workspace": "doctor-general-jest"
  },
  {
    "package": "doctor-general",
    "slugName": "comment",
    "filename": "packages/doctor-general/comment.js",
    "pageTitle": "",
    "pageSummary": "",
    "comments": [
      {
        "start": 68,
        "end": 71,
        "summary": "Check to see if a comment object has an example with a `test=true` tag within its structure",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "hasExample",
          "description": "Check to see if a comment object has an example with a `test=true` tag within its structure"
        },
        "keywords": [
          "@name"
        ],
        "filename": "packages/doctor-general/comment.js",
        "package": "doctor-general"
      },
      {
        "start": 75,
        "end": 77,
        "summary": "Pull all imports from a given file, including `@curried` examples",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "getImportsForTests",
          "description": "Pull all imports from a given file, including `@curried` examples"
        },
        "keywords": [
          "@name"
        ],
        "filename": "packages/doctor-general/comment.js",
        "package": "doctor-general"
      },
      {
        "start": 164,
        "end": 166,
        "summary": "Grab the summary from raw lines, given some indices to slice",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "getPageSummary",
          "description": "Grab the summary from raw lines, given some indices to slice"
        },
        "keywords": [
          "@name"
        ],
        "filename": "packages/doctor-general/comment.js",
        "package": "doctor-general"
      },
      {
        "start": 181,
        "end": 183,
        "summary": "Is it an asterisk with maybe some whitespace around it?",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "isAsterisky",
          "description": "Is it an asterisk with maybe some whitespace around it?"
        },
        "keywords": [
          "@name"
        ],
        "filename": "packages/doctor-general/comment.js",
        "package": "doctor-general"
      },
      {
        "start": 187,
        "end": 188,
        "summary": "",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "stripEmptyCommentLines",
          "description": ""
        },
        "keywords": [],
        "filename": "packages/doctor-general/comment.js",
        "package": "doctor-general"
      },
      {
        "start": 192,
        "end": 195,
        "summary": "Grab the example from raw lines and some indices to slice",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "getExample",
          "signature": "List String -> Integer -> Integer -> String",
          "description": "Grab the example from raw lines and some indices to slice"
        },
        "keywords": [
          "@name",
          "@signature"
        ],
        "filename": "packages/doctor-general/comment.js",
        "package": "doctor-general"
      },
      {
        "start": 315,
        "end": 315,
        "summary": "",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "description": ""
        },
        "keywords": [],
        "filename": "packages/doctor-general/comment.js",
        "package": "doctor-general"
      },
      {
        "start": 325,
        "end": 327,
        "summary": "",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "objectifyComments",
          "signature": "String -> String -> List Comment -> List CommentBlock",
          "description": ""
        },
        "keywords": [
          "@signature"
        ],
        "filename": "packages/doctor-general/comment.js",
        "package": "doctor-general"
      },
      {
        "start": 454,
        "end": 457,
        "summary": "Process comments given a interpreter and an error handler",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "processComments",
          "description": "Process comments given a interpreter and an error handler"
        },
        "keywords": [
          "@name"
        ],
        "filename": "packages/doctor-general/comment.js",
        "package": "doctor-general"
      }
    ],
    "order": 0,
    "links": [],
    "workspace": "doctor-general"
  },
  {
    "package": "doctor-general",
    "slugName": "interpreter",
    "filename": "packages/doctor-general/interpreter.js",
    "pageTitle": "",
    "pageSummary": "",
    "comments": [
      {
        "start": 25,
        "end": 34,
        "summary": "Return the number of arguments a function expects",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "arity",
          "example": [
            "```js test=true",
            "expect(arity((a,b,c) => {})).toEqual(3)",
            "expect(arity(function tertiary(a,b,c) {})).toEqual(3)",
            "expect(arity(a => b => c => c)).toEqual(1)",
            "expect(arity('poo')).toEqual(-1)"
          ],
          "description": "Return the number of arguments a function expects"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/doctor-general/interpreter.js",
        "package": "doctor-general"
      },
      {
        "start": 78,
        "end": 81,
        "summary": "Apply tests to a given interpreter in order to assess its correctness.",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "interrogate",
          "exported": true,
          "description": "Apply tests to a given interpreter in order to assess its correctness."
        },
        "keywords": [
          "@exported",
          "@name"
        ],
        "filename": "packages/doctor-general/interpreter.js",
        "package": "doctor-general"
      },
      {
        "start": 119,
        "end": 125,
        "summary": "Validate a given interpreter is correct. If you want to see _why_ it is incorrect, use `interrogate` instead.",
        "links": [
          "interrogate"
        ],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "validate",
          "see": "{@link interrogate}",
          "exported": true,
          "description": "Validate a given interpreter is correct. If you want to see _why_ it is incorrect, use `interrogate` instead."
        },
        "keywords": [
          "@exported",
          "@link",
          "@name",
          "@see"
        ],
        "filename": "packages/doctor-general/interpreter.js",
        "package": "doctor-general"
      }
    ],
    "order": 0,
    "links": [
      "interrogate"
    ],
    "workspace": "doctor-general"
  },
  {
    "package": "doctor-general",
    "slugName": "parse",
    "filename": "packages/doctor-general/parse.js",
    "pageTitle": "",
    "pageSummary": "",
    "comments": [
      {
        "start": 109,
        "end": 109,
        "summary": "",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "description": ""
        },
        "keywords": [],
        "filename": "packages/doctor-general/parse.js",
        "package": "doctor-general"
      }
    ],
    "order": 0,
    "links": [],
    "workspace": "doctor-general"
  },
  {
    "package": "doctor-general",
    "slugName": "text",
    "filename": "packages/doctor-general/text.js",
    "pageTitle": "",
    "pageSummary": "",
    "comments": [
      {
        "start": 18,
        "end": 31,
        "summary": "For strings which look like extended jsdoc comment line (e.g. ` * whatever`), eschew the comment decoration",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "trimComment",
          "signature": "String -> String",
          "example": [
            "```js test=true",
            "expect(trimComment(' * zipzop')).toEqual('zipzop')",
            "expect(trimComment(' * squiggle ')).toEqual('squiggle')",
            "const input = ' ~~kljlkjlk2j32lkj3 ' + Math.round(Math.random() * 1000)",
            "expect(trimComment(input)).toEqual(input)",
            "expect(trimComment(29292)).toEqual(29292)",
            "```"
          ],
          "description": "For strings which look like extended jsdoc comment line (e.g. ` * whatever`), eschew the comment decoration"
        },
        "keywords": [
          "@example",
          "@name",
          "@signature"
        ],
        "filename": "packages/doctor-general/text.js",
        "package": "doctor-general"
      }
    ],
    "order": 0,
    "links": [],
    "workspace": "doctor-general"
  },
  {
    "package": "file-system",
    "slugName": "fs",
    "filename": "packages/file-system/fs.js",
    "pageTitle": "",
    "pageSummary": "A Future-wrapped `fs` API, for future-based, lazy, easy-to-model asynchrony that makes it easy to manipulate the file system.",
    "comments": [
      {
        "start": 25,
        "end": 27,
        "summary": "",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "pageSummary": [
            "A Future-wrapped `fs` API, for future-based, lazy, easy-to-model asynchrony that makes it easy to manipulate the file system."
          ],
          "description": ""
        },
        "keywords": [
          "@pageSummary"
        ],
        "filename": "packages/file-system/fs.js",
        "package": "file-system"
      },
      {
        "start": 37,
        "end": 46,
        "summary": "make a file string relative",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "localize",
          "example": [
            "```js",
            "import { localize } from 'file-system'",
            "console.log(`support ${localize('business')}`)",
            "// support ./business",
            "```"
          ],
          "description": "make a file string relative"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/file-system/fs.js",
        "package": "file-system"
      },
      {
        "start": 49,
        "end": 80,
        "summary": "Read a file asynchronously as a Future-wrapped value.",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "keywords": [
          "@curried",
          "@example"
        ],
        "structure": {
          "description": "Read a file asynchronously as a Future-wrapped value.",
          "curried": [
            {
              "name": "readFileWithFormatAndCancel",
              "summary": "Can be given a file encoding and a cancellation function.",
              "lines": [
                "```js",
                "    import { fork } from 'fluture'",
                "    import { readFile } from 'file-system'",
                "    fork(console.warn)(console.log)(",
                "      readFileWithFormatAndCancel(() => process.exit(), 'utf8', './README.md')",
                "    )",
                "```"
              ]
            },
            {
              "name": "readFileWithCancel",
              "summary": "Reads `utf8` files only.",
              "lines": [
                "```js",
                "    import { fork } from 'fluture'",
                "    import { readFile } from 'file-system'",
                "    fork(console.warn)(console.log)(",
                "      readFileWithCancel(() => process.exit(), './README.md')",
                "    )",
                "```"
              ]
            },
            {
              "name": "readFile",
              "summary": "Eschews any custom cancellation.",
              "lines": [
                "```js",
                "    import { fork } from 'fluture'",
                "    import { readFile } from 'file-system'",
                "    fork(console.warn)(console.log)(readFile('./README.md'))",
                "```"
              ]
            }
          ]
        },
        "filename": "packages/file-system/fs.js",
        "package": "file-system"
      },
      {
        "start": 92,
        "end": 103,
        "summary": "Read a JSON file asynchronously as a Future-wrapped value, given a cancellation function",
        "links": [
          "readFile",
          "readJSONFile"
        ],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "readJSONFileWithCancel",
          "see": [
            "{@link readFile}",
            "{@link readJSONFile}"
          ],
          "example": [
            "```js",
            "import { fork } from 'fluture'",
            "import { readJSONFile } from 'file-system'",
            "fork(console.warn)(console.log)(readJSONFile('./package.json'))",
            "```"
          ],
          "description": "Read a JSON file asynchronously as a Future-wrapped value, given a cancellation function"
        },
        "keywords": [
          "@example",
          "@link",
          "@name",
          "@see"
        ],
        "filename": "packages/file-system/fs.js",
        "package": "file-system"
      },
      {
        "start": 110,
        "end": 121,
        "summary": "Read a JSON file asynchronously as a Future-wrapped value",
        "links": [
          "readFile",
          "readJSONFileWithCancel"
        ],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "readJSONFile",
          "see": [
            "{@link readFile}",
            "{@link readJSONFileWithCancel}"
          ],
          "example": [
            "```js",
            "import { fork } from 'fluture'",
            "import { readJSONFile } from 'file-system'",
            "fork(console.warn)(console.log)(readJSONFile('./package.json'))",
            "```"
          ],
          "description": "Read a JSON file asynchronously as a Future-wrapped value"
        },
        "keywords": [
          "@example",
          "@link",
          "@name",
          "@see"
        ],
        "filename": "packages/file-system/fs.js",
        "package": "file-system"
      },
      {
        "start": 124,
        "end": 140,
        "summary": "Read a glob asynchronously as a Future-wrapped value, with configuration and a cancellation function. Configuration is passed to [glob](https://www.npmjs.com/package/glob)",
        "links": [
          "readDirWithConfig",
          "readDir"
        ],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "readDirWithConfigAndCancel",
          "see": [
            "{@link readDirWithConfig}",
            "{@link readDir}"
          ],
          "example": [
            "```js",
            "import { fork } from 'fluture'",
            "import { readDirWithConfigAndCancel } from 'file-system'",
            "// [...]",
            "pipe(",
            "  fork(console.warn)(console.log)",
            ")(readDirWithConfigAndCancel(cancellationFn, { ignore: ['node_modules/**'] }, 'src/*'))",
            "```"
          ],
          "description": "Read a glob asynchronously as a Future-wrapped value, with configuration and a cancellation function. Configuration is passed to [glob](https://www.npmjs.com/package/glob)"
        },
        "keywords": [
          "@example",
          "@link",
          "@name",
          "@see"
        ],
        "filename": "packages/file-system/fs.js",
        "package": "file-system"
      },
      {
        "start": 157,
        "end": 172,
        "summary": "Read a glob asynchronously as a Future-wrapped value, with configuration. Configuration is passed to [glob](https://www.npmjs.com/package/glob)",
        "links": [
          "readDirWithConfigAndCancel",
          "readDir"
        ],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "readDirWithConfig",
          "see": [
            "{@link readDirWithConfigAndCancel}",
            "{@link readDir}"
          ],
          "example": [
            "```js",
            "import { fork } from 'fluture'",
            "import { readDirWithConfig } from 'file-system'",
            "// [...]",
            "pipe(",
            "  fork(console.warn)(console.log)",
            ")(readDirWithConfig({ ignore: ['node_modules/**'] }, 'src/*'))",
            "```"
          ],
          "description": "Read a glob asynchronously as a Future-wrapped value, with configuration. Configuration is passed to [glob](https://www.npmjs.com/package/glob)"
        },
        "keywords": [
          "@example",
          "@link",
          "@name",
          "@see"
        ],
        "filename": "packages/file-system/fs.js",
        "package": "file-system"
      },
      {
        "start": 175,
        "end": 188,
        "summary": "Read a glob asynchronously as a Future-wrapped value, default config assumed. Configuration is passed to [glob](https://www.npmjs.com/package/glob)",
        "links": [
          "readDirWithConfigAndCancel",
          "readDirWithConfig"
        ],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "readDir",
          "see": [
            "{@link readDirWithConfigAndCancel}",
            "{@link readDirWithConfig}"
          ],
          "example": [
            "```js",
            "import { fork } from 'fluture'",
            "import { readDir } from 'file-system'",
            "// [...]",
            "fork(console.warn)(console.log)(readDir('src/*'))",
            "```"
          ],
          "description": "Read a glob asynchronously as a Future-wrapped value, default config assumed. Configuration is passed to [glob](https://www.npmjs.com/package/glob)"
        },
        "keywords": [
          "@example",
          "@link",
          "@name",
          "@see"
        ],
        "filename": "packages/file-system/fs.js",
        "package": "file-system"
      },
      {
        "start": 191,
        "end": 211,
        "summary": "Write to a file, with configuration and a cancellation function. Unlike `fs.writeFile`, this will return the written value as a Future-wrapped value.",
        "links": [
          "writeFileWithConfig",
          "writeFile"
        ],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "writeFileWithConfigAndCancel",
          "see": [
            "{@link writeFileWithConfig}",
            "{@link writeFile}"
          ],
          "example": [
            "```js",
            "import { fork } from 'fluture'",
            "import { writeFileWithConfig } from 'file-system'",
            "// [...]",
            "fork(console.warn)(console.log)(",
            "  writeFileWithConfigAndCancel(",
            "    cancellationFunction,",
            "    { ...fs.writeFileConfig },",
            "    'my-file.txt',",
            "    'hey I am a file'",
            "  )",
            ")",
            "```"
          ],
          "description": "Write to a file, with configuration and a cancellation function. Unlike `fs.writeFile`, this will return the written value as a Future-wrapped value."
        },
        "keywords": [
          "@example",
          "@link",
          "@name",
          "@see"
        ],
        "filename": "packages/file-system/fs.js",
        "package": "file-system"
      },
      {
        "start": 227,
        "end": 246,
        "summary": "Write to a file, with configuration. Unlike `fs.writeFile`, this will return the written value as a Future-wrapped value.",
        "links": [
          "writeFileWithConfigAndCancel",
          "writeFile"
        ],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "writeFileWithConfig",
          "see": [
            "{@link writeFileWithConfigAndCancel}",
            "{@link writeFile}"
          ],
          "example": [
            "```js",
            "import { fork } from 'fluture'",
            "import { writeFileWithConfig } from 'file-system'",
            "// [...]",
            "fork(console.warn)(console.log)(",
            "  writeFileWithConfig(",
            "    { encoding: 'utf8' },",
            "    'my-file.txt',",
            "    'hey I am a file'",
            "  )",
            ")",
            "```"
          ],
          "description": "Write to a file, with configuration. Unlike `fs.writeFile`, this will return the written value as a Future-wrapped value."
        },
        "keywords": [
          "@example",
          "@link",
          "@name",
          "@see"
        ],
        "filename": "packages/file-system/fs.js",
        "package": "file-system"
      },
      {
        "start": 249,
        "end": 267,
        "summary": "Write to a file, assuming `'utf8'`. Unlike `fs.writeFile`, this will return the written value as a Future-wrapped value.",
        "links": [
          "writeFileWithConfigAndCancel",
          "writeFileWithConfig"
        ],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "writeFile",
          "see": [
            "{@link writeFileWithConfigAndCancel}",
            "{@link writeFileWithConfig}"
          ],
          "example": [
            "```js",
            "import { fork } from 'fluture'",
            "import { writeFileWithConfig } from 'file-system'",
            "// [...]",
            "fork(console.warn)(console.log)(",
            "  writeFileWithConfig(",
            "    'my-file.txt',",
            "    'hey I am a file'",
            "  )",
            ")",
            "```"
          ],
          "description": "Write to a file, assuming `'utf8'`. Unlike `fs.writeFile`, this will return the written value as a Future-wrapped value."
        },
        "keywords": [
          "@example",
          "@link",
          "@name",
          "@see"
        ],
        "filename": "packages/file-system/fs.js",
        "package": "file-system"
      },
      {
        "start": 270,
        "end": 318,
        "summary": "Remove a file, configurably, with cancellation. Unlike `fs.rm`, this returns the path of the deleted file as a Future-wrapped string.",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "keywords": [
          "@curried",
          "@example"
        ],
        "structure": {
          "description": "Remove a file, configurably, with cancellation. Unlike `fs.rm`, this returns the path of the deleted file as a Future-wrapped string.",
          "curried": [
            {
              "name": "removeFileWithConfigAndCancel",
              "summary": "Configuration and cancellation",
              "lines": [
                "```js",
                "     import { fork } from 'fluture'",
                "     import { removeFileWithConfigAndCancel } from 'file-system'",
                "     fork(console.warn)(console.log)(",
                "       removeFileWithConfigAndCancel(",
                "         cancellationFn,",
                "         { ...fs.removeFileConfig },",
                "         'my-file.txt'",
                "       )",
                "     )",
                "```"
              ]
            },
            {
              "name": "removeFileWithConfig",
              "summary": "No config, just cancellation",
              "lines": [
                "```js",
                "    import { fork } from 'fluture'",
                "    import { removeFileWithConfig } from 'file-system'",
                "    // [...]",
                "    fork(console.warn)(console.log)(",
                "      removeFileWithConfig(",
                "        { ...fs.removeFileConfig },",
                "        'my-file.txt'",
                "      )",
                "    )",
                "```"
              ]
            },
            {
              "name": "removeFile",
              "summary": "remove a file. Aliased to `rm`.",
              "lines": [
                "```js",
                "    import { fork } from 'fluture'",
                "    import { removeFile } from 'file-system'",
                "    // [...]",
                "    fork(console.warn)(console.log)(",
                "      removeFile(",
                "        'my-file.txt'",
                "      )",
                "    )",
                "```"
              ]
            }
          ]
        },
        "filename": "packages/file-system/fs.js",
        "package": "file-system"
      },
      {
        "start": 340,
        "end": 358,
        "summary": "Remove multiple files, configurably, with a cancellation function.",
        "links": [
          "removeFilesWithConfig",
          "removeFiles"
        ],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "removeFilesWithConfigAndCancel",
          "see": [
            "{@link removeFilesWithConfig}",
            "{@link removeFiles}"
          ],
          "example": [
            "```js",
            "import { fork } from 'fluture'",
            "import { removeFilesWithConfig } from 'file-system'",
            "// [...]",
            "fork(console.warn)(console.log)(",
            "  removeFilesWithConfigAndCancel(",
            "    cancellationFn,",
            "    { parallel: 30 },",
            "    [...list, ...of, ...thirty, ...files]",
            "  )",
            ")",
            "```"
          ],
          "description": "Remove multiple files, configurably, with a cancellation function."
        },
        "keywords": [
          "@example",
          "@link",
          "@name",
          "@see"
        ],
        "filename": "packages/file-system/fs.js",
        "package": "file-system"
      },
      {
        "start": 368,
        "end": 385,
        "summary": "Remove multiple files, configurably.",
        "links": [
          "removeFilesWithConfigAndCancel",
          "removeFiles"
        ],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "removeFilesWithConfig",
          "see": [
            "{@link removeFilesWithConfigAndCancel}",
            "{@link removeFiles}"
          ],
          "example": [
            "```js",
            "import { fork } from 'fluture'",
            "import { DEFAULT_REMOVAL_CONFIG, removeFilesWithConfig } from 'file-system'",
            "// [...]",
            "fork(console.warn)(console.log)(",
            "  removeFilesWithConfig(",
            "    DEFAULT_REMOVAL_CONFIG,",
            "    [...list, ...of, ...thirty, ...files]",
            "  )",
            ")",
            "```"
          ],
          "description": "Remove multiple files, configurably."
        },
        "keywords": [
          "@example",
          "@link",
          "@name",
          "@see"
        ],
        "filename": "packages/file-system/fs.js",
        "package": "file-system"
      },
      {
        "start": 388,
        "end": 404,
        "summary": "Remove multiple files, configurably.",
        "links": [
          "removeFilesWithConfigAndCancel",
          "removeFiles"
        ],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "removeFilesWithConfig",
          "see": [
            "{@link removeFilesWithConfigAndCancel}",
            "{@link removeFiles}"
          ],
          "example": [
            "```js",
            "import { fork } from 'fluture'",
            "import { removeFilesWithConfig } from 'file-system'",
            "// [...]",
            "fork(console.warn)(console.log)(",
            "  removeFilesWithConfig(",
            "    [...list, ...of, ...thirty, ...files]",
            "  )",
            ")",
            "```"
          ],
          "description": "Remove multiple files, configurably."
        },
        "keywords": [
          "@example",
          "@link",
          "@name",
          "@see"
        ],
        "filename": "packages/file-system/fs.js",
        "package": "file-system"
      },
      {
        "start": 407,
        "end": 426,
        "summary": "Make a directory, given a cancellation function. Returns a Future-wrapped file path as a discrete value upon success.",
        "links": [
          "mkdir",
          "mkdirp"
        ],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "mkdirWithCancel",
          "see": [
            "{@link mkdir}",
            "{@link mkdirp}"
          ],
          "example": [
            "```js",
            "import { fork } from 'fluture'",
            "import { mkdirWithCancel } from 'file-system'",
            "// [...]",
            "fork(console.warn)(console.log)(",
            "  mkdirWithCancel(",
            "    () => {},",
            "    {},",
            "    'my-dir'",
            "  )",
            ")",
            "```"
          ],
          "description": "Make a directory, given a cancellation function. Returns a Future-wrapped file path as a discrete value upon success."
        },
        "keywords": [
          "@example",
          "@link",
          "@name",
          "@see"
        ],
        "filename": "packages/file-system/fs.js",
        "package": "file-system"
      },
      {
        "start": 436,
        "end": 454,
        "summary": "Make a directory Returns a Future-wrapped file path as a discrete value upon success.",
        "links": [
          "mkdirWithCancel",
          "mkdirp"
        ],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "mkdir",
          "see": [
            "{@link mkdirWithCancel}",
            "{@link mkdirp}"
          ],
          "example": [
            "```js",
            "import { fork } from 'fluture'",
            "import { mkdir } from 'file-system'",
            "// [...]",
            "fork(console.warn)(console.log)(",
            "  mkdir(",
            "    {},",
            "    'my-dir'",
            "  )",
            ")",
            "```"
          ],
          "description": "Make a directory Returns a Future-wrapped file path as a discrete value upon success."
        },
        "keywords": [
          "@example",
          "@link",
          "@name",
          "@see"
        ],
        "filename": "packages/file-system/fs.js",
        "package": "file-system"
      },
      {
        "start": 457,
        "end": 475,
        "summary": "Make a directory, recursively. Returns a Future-wrapped file path as a discrete value upon success.",
        "links": [
          "mkdirWithCancel",
          "mkdir"
        ],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "mkdirp",
          "see": [
            "{@link mkdirWithCancel}",
            "{@link mkdir}"
          ],
          "example": [
            "```js",
            "import { fork } from 'fluture'",
            "import { mkdir } from 'file-system'",
            "// [...]",
            "fork(console.warn)(console.log)(",
            "  mkdir(",
            "    {},",
            "    'my-dir'",
            "  )",
            ")",
            "```"
          ],
          "description": "Make a directory, recursively. Returns a Future-wrapped file path as a discrete value upon success."
        },
        "keywords": [
          "@example",
          "@link",
          "@name",
          "@see"
        ],
        "filename": "packages/file-system/fs.js",
        "package": "file-system"
      },
      {
        "start": 488,
        "end": 503,
        "summary": "Write a file to a nested folder and automatically create needed folders, akin to `mkdir -p`",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "writeFileWithAutoPath",
          "example": [
            "```js",
            "import { fork } from 'fluture'",
            "import { writeFileWithAutoPath } from 'file-system'",
            "// [...]",
            "fork(console.warn)(console.log)(",
            "  writeFileWithAutoPath(",
            "    \"folders/you/must/exist/file.biz\",",
            "    \"my cool content\"",
            "  )",
            ")",
            "```"
          ],
          "description": "Write a file to a nested folder and automatically create needed folders, akin to `mkdir -p`"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/file-system/fs.js",
        "package": "file-system"
      }
    ],
    "order": 0,
    "links": [
      "readFile",
      "readJSONFile",
      "readFile",
      "readJSONFileWithCancel",
      "readDirWithConfig",
      "readDir",
      "readDirWithConfigAndCancel",
      "readDir",
      "readDirWithConfigAndCancel",
      "readDirWithConfig",
      "writeFileWithConfig",
      "writeFile",
      "writeFileWithConfigAndCancel",
      "writeFile",
      "writeFileWithConfigAndCancel",
      "writeFileWithConfig",
      "removeFilesWithConfig",
      "removeFiles",
      "removeFilesWithConfigAndCancel",
      "removeFiles",
      "removeFilesWithConfigAndCancel",
      "removeFiles",
      "mkdir",
      "mkdirp",
      "mkdirWithCancel",
      "mkdirp",
      "mkdirWithCancel",
      "mkdir"
    ],
    "workspace": "file-system"
  },
  {
    "package": "inherent",
    "slugName": "groupByIndex",
    "filename": "packages/inherent/groupByIndex.js",
    "pageTitle": "",
    "pageSummary": "",
    "comments": [
      {
        "start": 12,
        "end": 12,
        "summary": "",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "description": ""
        },
        "keywords": [],
        "filename": "packages/inherent/groupByIndex.js",
        "package": "inherent"
      },
      {
        "start": 14,
        "end": 34,
        "summary": "",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "groupByIndex",
          "example": [
            "```js test=true",
            "expect(groupByIndex(0, [",
            "  ['spades', 'ace'],",
            "  ['diamonds', 'seven'],",
            "  ['hearts', 'eight'],",
            "  ['clubs', 'jack'],",
            "  ['diamonds', 'ace'],",
            "  ['spades', 'king'],",
            "  ['diamonds', 'four'],",
            "  ['spades', 'eight'],",
            "])).toEqual({",
            "  clubs: [['jack']],",
            "  diamonds: [['seven'], ['ace'], ['four']],",
            "  hearts: [['eight']],",
            "  spades: [['ace'], ['king'], ['eight']],",
            "})",
            "```"
          ],
          "description": ""
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/inherent/groupByIndex.js",
        "package": "inherent"
      },
      {
        "start": 39,
        "end": 59,
        "summary": "",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "groupFlatByIndex",
          "example": [
            "```js test=true",
            "expect(groupFlatByIndex(0, [",
            "  ['spades', 'ace'],",
            "  ['diamonds', 'seven'],",
            "  ['hearts', 'eight'],",
            "  ['clubs', 'jack'],",
            "  ['diamonds', 'ace'],",
            "  ['spades', 'king'],",
            "  ['diamonds', 'four'],",
            "  ['spades', 'eight'],",
            "])).toEqual({",
            "  clubs: ['jack'],",
            "  diamonds: ['seven', 'ace', 'four'],",
            "  hearts: ['eight'],",
            "  spades: ['ace', 'king', 'eight'],",
            "})",
            "```"
          ],
          "description": ""
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/inherent/groupByIndex.js",
        "package": "inherent"
      }
    ],
    "order": 0,
    "links": [],
    "workspace": "inherent"
  },
  {
    "package": "inherent",
    "slugName": "primitives",
    "filename": "packages/inherent/primitives.js",
    "pageTitle": "",
    "pageSummary": "",
    "comments": [
      {
        "start": 2,
        "end": 18,
        "summary": "Generic comparison function. This can be used to create a number of other more complex functions.",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "equalishBy",
          "example": [
            "```js test=true",
            "const productIdSelector = z => {",
            "  const d = z.indexOf('-')",
            "  return d > -1 ? z.slice(0, d) : 'NO_MATCH'",
            "}",
            "const isProduct = equalishBy(productIdSelector, 'coolco')",
            "expect(isProduct('coolco-10020')).toBeTruthy()",
            "expect(isProduct('otherco-xkswn')).toBeFalsy()",
            "expect(isProduct('blabbo')).toBeFalsy()",
            "```"
          ],
          "description": "Generic comparison function. This can be used to create a number of other more complex functions."
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/inherent/primitives.js",
        "package": "inherent"
      },
      {
        "start": 35,
        "end": 47,
        "summary": "Coerce values to boolean explicitly",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "coerce",
          "param": "{any} x Any value",
          "returns": "boolean",
          "example": [
            "```js test=true",
            "expect(coerce(0)).toBeFalsy()",
            "expect(coerce('')).toBeFalsy()",
            "expect(coerce([])).toBeTruthy()",
            "expect(coerce(1)).toBeTruthy()",
            "```"
          ],
          "description": "Coerce values to boolean explicitly"
        },
        "keywords": [
          "@example",
          "@name",
          "@param",
          "@returns"
        ],
        "filename": "packages/inherent/primitives.js",
        "package": "inherent"
      }
    ],
    "order": 0,
    "links": [],
    "workspace": "inherent"
  },
  {
    "package": "kiddo",
    "slugName": "kiddo",
    "filename": "packages/kiddo/kiddo.js",
    "pageTitle": "",
    "pageSummary": "Call external processes and consume them as a Future-wrapped value. This is a light wrapper around `execa`, so please see [execa](https://github.com/sindresorhus/execa)'s documentation for more info.",
    "comments": [
      {
        "start": 11,
        "end": 14,
        "summary": "",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "pageSummary": [
            "Call external processes and consume them as a Future-wrapped value.",
            "This is a light wrapper around `execa`, so please see [execa](https://github.com/sindresorhus/execa)'s documentation for more info."
          ],
          "description": ""
        },
        "keywords": [
          "@pageSummary"
        ],
        "filename": "packages/kiddo/kiddo.js",
        "package": "kiddo"
      },
      {
        "start": 17,
        "end": 64,
        "summary": "Consume external commands as a Future-wrapped value.",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "keywords": [
          "@curried",
          "@example",
          "@future"
        ],
        "structure": {
          "future": true,
          "description": "Consume external commands as a Future-wrapped value.",
          "curried": [
            {
              "name": "execWithConfig",
              "summary": "Passes all possible configuration values plus a cancellation function.",
              "lines": [
                "```js",
                "    import { execWithConfig } from 'kiddo'",
                "    import { fork } from 'fluture'",
                "    fork(console.warn)(console.log)(",
                "      execWithConfig(",
                "        function customCancellationFunction() {},",
                "        'echo',",
                "        { cleanup: true },",
                "        ['ahoy']",
                "      )",
                "    )",
                "```"
              ]
            },
            {
              "name": "execWithCancel",
              "summary": "Eschews any configuration and instead only expects a cancellation function, command and arguments.",
              "lines": [
                "```js",
                "    import { execWithCancel } from 'kiddo'",
                "    import { fork } from 'fluture'",
                "    fork(console.warn)(console.log)(",
                "      execWithCancel(",
                "        function customCancellationFunction() {},",
                "        'echo',",
                "        ['ahoy']",
                "      )",
                "    )",
                "```"
              ]
            },
            {
              "name": "exec",
              "summary": "Eschews any configuration or cancellation function. Needs only command and arguments.",
              "lines": [
                "```js test=true",
                "    import { fork } from 'fluture'",
                "    // drgen-import-above",
                "    const blah = Math.round(Math.random() * 100000)",
                "    fork(done)(z => {",
                "      expect(z.stdout).toEqual('' + blah)",
                "      done()",
                "    })(exec('echo', [blah]))",
                "```"
              ]
            }
          ]
        },
        "filename": "packages/kiddo/kiddo.js",
        "package": "kiddo"
      },
      {
        "start": 169,
        "end": 189,
        "summary": "Add an `ora` indicator to a Future",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "signal",
          "future": true,
          "exported": true,
          "example": [
            "```js test=true",
            "import { pipe, map } from 'ramda'",
            "import { readFile } from 'file-system'",
            "// drgen-import-above",
            "const cancel = () => {}",
            "pipe(",
            "  signal(cancel, { text: 'Reading file...', successText: 'Read file!'}),",
            "  map(JSON.parse),",
            "  fork(done)(raw => {",
            "    expect(raw.name).toEqual('kiddo')",
            "    done()",
            "  })",
            ")(readFile('./package.json'))",
            "```"
          ],
          "description": "Add an `ora` indicator to a Future"
        },
        "keywords": [
          "@example",
          "@exported",
          "@future",
          "@name"
        ],
        "filename": "packages/kiddo/kiddo.js",
        "package": "kiddo"
      }
    ],
    "order": 0,
    "links": [],
    "workspace": "kiddo"
  },
  {
    "package": "knot",
    "slugName": "knot",
    "filename": "packages/knot/knot.js",
    "pageTitle": "",
    "pageSummary": "",
    "comments": [
      {
        "start": 48,
        "end": 60,
        "summary": "Slice a string by counted delimiters",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "nthIndex",
          "example": [
            "```js test=true",
            "expect(",
            "  nthIndex('/', -5, 'a/b/c/d/e/f/g/h/i/j')",
            ").toEqual(\"f/g/h/i/j\")",
            "expect(",
            "  nthIndex('/', 5, 'a/b/c/d/e/f/g/h/i/j')",
            ").toEqual(\"a/b/c/d/e\")",
            "```"
          ],
          "description": "Slice a string by counted delimiters"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/knot/knot.js",
        "package": "knot"
      },
      {
        "start": 65,
        "end": 73,
        "summary": "A simple memoized utility for repeating a string and joining the array.",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "strepeat",
          "example": [
            "```js test=true",
            "expect(strepeat('=', 5)).toEqual('=====')",
            "expect(strepeat('/', -1)).toEqual('')",
            "```"
          ],
          "description": "A simple memoized utility for repeating a string and joining the array."
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/knot/knot.js",
        "package": "knot"
      },
      {
        "start": 78,
        "end": 86,
        "summary": "Capitalize a string",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "capitalize",
          "example": [
            "```js test=true",
            "expect(capitalize(\"nice\")).toEqual(\"Nice\")",
            "expect(capitalize(\"\")).toEqual(\"\")",
            "```"
          ],
          "description": "Capitalize a string"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/knot/knot.js",
        "package": "knot"
      },
      {
        "start": 90,
        "end": 104,
        "summary": "Take PascalCase and kebabCase inputs and replace them with slug-case",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "slugWord",
          "example": [
            "```js test=true",
            "expect(slugWord('CoolFuckingShit')).toEqual('cool-fucking-shit')",
            "expect(slugWord('hoorayNiceLife')).toEqual('hooray-nice-life')",
            "expect(slugWord('Do nothingCool ever')).toEqual('do nothing-cool ever')",
            "expect(",
            "  slugWord('src/components/homepage/AugmentedDetailsDumbComponent')",
            ").toEqual(",
            "  'src-components-homepage-augmented-details-dumb-component'",
            ")",
            "```"
          ],
          "description": "Take PascalCase and kebabCase inputs and replace them with slug-case"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/knot/knot.js",
        "package": "knot"
      }
    ],
    "order": 0,
    "links": [],
    "workspace": "knot"
  },
  {
    "package": "monorail",
    "slugName": "helpers",
    "filename": "packages/monorail/helpers.js",
    "pageTitle": "helpers",
    "pageSummary": "Built-in helpers for making custom plugins more robust. The \"helpers\" are the third parameter passed to a custom plugin's function.",
    "comments": [
      {
        "start": 22,
        "end": 25,
        "summary": "",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "pageSummary": [
            "Built-in helpers for making custom plugins more robust. The \"helpers\" are the third parameter passed to a custom plugin's function."
          ],
          "page": "helpers",
          "description": "",
          "name": "helpers"
        },
        "keywords": [
          "@page",
          "@pageSummary"
        ],
        "filename": "packages/monorail/helpers.js",
        "package": "monorail"
      },
      {
        "start": 33,
        "end": 44,
        "summary": "Use this helper to test a regex that matches against any single incidence on any line",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "any",
          "example": [
            "```js",
            "const plugin = {",
            "  name: 'get-const',",
            "  fn: (state, file, { any }) => any(/const/)",
            "}",
            "export default plugin",
            "```"
          ],
          "description": "Use this helper to test a regex that matches against any single incidence on any line"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/monorail/helpers.js",
        "package": "monorail"
      },
      {
        "start": 47,
        "end": 57,
        "summary": "Use this helper to test a regex that matches and filters against every line",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "lines",
          "example": [
            "```js",
            "export default {",
            "  name: 'unexported-consts',",
            "  fn: (state, file, { lines }) => lines(/^const/)",
            "}",
            "```"
          ],
          "description": "Use this helper to test a regex that matches and filters against every line"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/monorail/helpers.js",
        "package": "monorail"
      },
      {
        "start": 62,
        "end": 72,
        "summary": "Use this helper to test a regex that matches and finds the first matching line",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "line",
          "example": [
            "```js",
            "export default {",
            "  name: 'exported-default',",
            "  fn: (state, file, { line }) => line(/export default/g)",
            "}",
            "```"
          ],
          "description": "Use this helper to test a regex that matches and finds the first matching line"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/monorail/helpers.js",
        "package": "monorail"
      },
      {
        "start": 77,
        "end": 87,
        "summary": "Use this helper to test a regex that matches and finds the last matching line",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "lastLine",
          "example": [
            "```js",
            "export default {",
            "  name: 'exported-last',",
            "  fn: (state, file, { lastLine }) => lastLine(/export/g)",
            "}",
            "```"
          ],
          "description": "Use this helper to test a regex that matches and finds the last matching line"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/monorail/helpers.js",
        "package": "monorail"
      },
      {
        "start": 92,
        "end": 102,
        "summary": "Use this helper to select content between two repeating regular expressions",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "between",
          "example": [
            "```js",
            "export default {",
            "  name: 'expanded-imports',",
            "  fn: (state, file, { between }) => between(/^import/, /from (.*)/)",
            "}",
            "```"
          ],
          "description": "Use this helper to select content between two repeating regular expressions"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/monorail/helpers.js",
        "package": "monorail"
      },
      {
        "start": 115,
        "end": 126,
        "summary": "Use this helper to easily reduce over all lines and aggregate a value",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "reduce",
          "example": [
            "```js",
            "const plugin = {",
            "  name: 'select-specifics',",
            "  fn: (state, file, { reduce }) => reduce((agg, [line, content]) => content.length > 10 : agg.concat(content) : agg, [])",
            "}",
            "export default plugin",
            "```"
          ],
          "description": "Use this helper to easily reduce over all lines and aggregate a value"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/monorail/helpers.js",
        "package": "monorail"
      },
      {
        "start": 131,
        "end": 141,
        "summary": "Use this helper to select all content between two repeating regular expressions",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "selectAll",
          "example": [
            "```js",
            "export default {",
            "  name: 'expanded-imports',",
            "  fn: (state, file, { selectAll }) => selectAll(/^import/, /from (.*)/)",
            "}",
            "```"
          ],
          "description": "Use this helper to select all content between two repeating regular expressions"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/monorail/helpers.js",
        "package": "monorail"
      },
      {
        "start": 179,
        "end": 192,
        "summary": "Use this helper to easily filter all lines related to a given regular expression",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "filter",
          "example": [
            "```js",
            "const plugin = {",
            "  name: 'keyword-match',",
            "  fn: (state, file, { config, filter }) => filter(",
            "    config?.keyword ?? /monorail/",
            "  )",
            "}",
            "export default plugin",
            "```"
          ],
          "description": "Use this helper to easily filter all lines related to a given regular expression"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/monorail/helpers.js",
        "package": "monorail"
      },
      {
        "start": 206,
        "end": 219,
        "summary": "The `config` value is patched in so that it is easier to pass values from the rulefile configuration to the plugins themselves, scoped to the plugin name.",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "config",
          "example": [
            "```js",
            "const plugin = {",
            "  name: 'keyword-match',",
            "  fn: (state, file, { filter, config }) => filter(",
            "    config?.keyword ?? /monorail/",
            "  )",
            "}",
            "export default plugin",
            "```"
          ],
          "description": "The `config` value is patched in so that it is easier to pass values from the rulefile configuration to the plugins themselves, scoped to the plugin name."
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/monorail/helpers.js",
        "package": "monorail"
      }
    ],
    "order": 0,
    "links": [],
    "workspace": "monorail"
  },
  {
    "package": "jest-config",
    "slugName": "jest.config",
    "filename": "shared/jest-config/jest.config.js",
    "pageTitle": "",
    "pageSummary": "",
    "comments": [
      {
        "start": 21,
        "end": 21,
        "summary": "",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "description": ""
        },
        "keywords": [],
        "filename": "shared/jest-config/jest.config.js",
        "package": "jest-config"
      }
    ],
    "order": 0,
    "links": [],
    "workspace": "jest-config"
  },
  {
    "package": "digested",
    "slugName": "summary",
    "filename": "tools/digested/summary.js",
    "pageTitle": "",
    "pageSummary": "",
    "comments": [
      {
        "start": 89,
        "end": 162,
        "summary": "Summarize a project, given: - the path to a `package.json` file - the path to a `dr-generated.json` file - the URI of a documentation site - the URI of a repository - (optional) a banner - or (optional) the path to a file which represents a banner",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "summarize",
          "future": true,
          "example": [
            "```js test=true",
            "import path from 'node:path'",
            "import { fork } from 'fluture'",
            "// drgen-import-above",
            "fork(done)(x => {",
            "  expect(x.split('\\n')).toEqual([",
            "    \"this is a cool test!\",",
            "    \"## apps\",",
            "    \"\",",
            "    \" * [docs](//repo.biz/apps/docs) - documentation site for monoculture\",",
            "    \"\",",
            "    \"## packages\",",
            "    \"\",",
            "    \" * [bloodline](//repo.biz/packages/bloodline) - determine the relationships between files 🩸\",",
            "    \" * [climate](//repo.biz/packages/climate) - CLI utilities, friend 👯\",",
            "    \" * [climate-json](//repo.biz/packages/climate-json) - JSON parser for climate 🐐\",",
            "    \" * [climate-toml](//repo.biz/packages/climate-toml) - TOML parser for climate 🍅\",",
            "    \" * [climate-yaml](//repo.biz/packages/climate-yaml) - YAML parser for climate 🍠\",",
            "    \" * [clox](//repo.biz/packages/clox) - boxes for the terminal ⏰\",",
            "    \" * [doctor-general](//repo.biz/packages/doctor-general) - documentation generation 🩻\",",
            "    \" * [doctor-general-jest](//repo.biz/packages/doctor-general-jest) - documentation generation - jest 🃏\",",
            "    \" * [doctor-general-mdx](//repo.biz/packages/doctor-general-mdx) - documentation generation - mdx 🩺\",",
            "    \" * [file-system](//repo.biz/packages/file-system) - fs, but in the future 🔮\",",
            "    \" * [inherent](//repo.biz/packages/inherent) - functional utilities for primitives ⛺️\",",
            "    \" * [kiddo](//repo.biz/packages/kiddo) - child processes in the future 👶\",",
            "    \" * [knot](//repo.biz/packages/knot) - functional utilities for strings 🪢\",",
            "    \" * [manacle](//repo.biz/packages/manacle) - make conventions into rules, magically 🔒\",",
            "    \" * [monocle](//repo.biz/packages/monocle) - inspect code and apply rules, magically 🧐\",",
            "    \" * [monorail](//repo.biz/packages/monorail) - plugins for smug grins 🚂\",",
            "    \" * [robot-tourist](//repo.biz/packages/robot-tourist) - human-centric source code interpreter 🤖\",",
            "    \" * [water-wheel](//repo.biz/packages/water-wheel) - future-wrapping for streaming interfaces 🌊\",",
            "    \"\",",
            "    \"## shared\",",
            "    \"\",",
            "    \" * [eslint-config-monoculture](//repo.biz/shared/eslint-config-monoculture) - shared eslint configuration for monoculture packages 🧹\",",
            "    \" * [jest-config](//repo.biz/shared/jest-config) - shared jest configuration for monoculture packages 🎪\",",
            "    \" * [monoculture-tsconfig](//repo.biz/shared/monoculture-tsconfig) - shared tsconfig for monoculture packages 😵\",",
            "    \"\",",
            "    \"## tools\",",
            "    \"\",",
            "    \" * [digested](//repo.biz/tools/digested) - summarize and automatically generate information about your projects 🍽️\",",
            "    \" * [doctor-general-cli](//repo.biz/tools/doctor-general-cli) - documentation generation in a nice CLI 🫡\",",
            "    \" * [gitparty](//repo.biz/tools/gitparty) - visualize git logs with magical context 🎨\",",
            "    \" * [spacework](//repo.biz/tools/spacework) - meta tools for monoculture ☄️\",",
            "    \" * [superorganism](//repo.biz/tools/superorganism) - script runner from beyond the moon 🐁\",",
            "    \" * [treacle](//repo.biz/tools/treacle) - command line interface tree visualization pun 🫠\",",
            "    \"\",",
            "  ])",
            "  done()",
            "})(summarize({",
            "  readme: true,",
            "  dirPath: process.cwd(),",
            "  banner: 'this is a cool test!',",
            "  // repoUrl: 'https://github.com/brekk/monoculture/tree/main',",
            "  // docUrl: 'https://brekk.github.io/monoculture',",
            "  // base package only!",
            "  repoUrl: '//repo.biz',",
            "  docUrl: '//repo.doc',",
            "  pkgPath: '../../package.json',",
            "  drGenPath: '../../apps/docs/dr-generated.json'",
            "}))",
            "```"
          ],
          "description": "Summarize a project, given: - the path to a `package.json` file - the path to a `dr-generated.json` file - the URI of a documentation site - the URI of a repository - (optional) a banner - or (optional) the path to a file which represents a banner"
        },
        "keywords": [
          "@example",
          "@future",
          "@name"
        ],
        "filename": "tools/digested/summary.js",
        "package": "digested"
      }
    ],
    "order": 0,
    "links": [],
    "workspace": "digested"
  },
  {
    "package": "src",
    "slugName": "runner",
    "filename": "tools/superorganism/src/runner.js",
    "pageTitle": "",
    "pageSummary": "",
    "comments": [
      {
        "start": 151,
        "end": 151,
        "summary": "",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "description": ""
        },
        "keywords": [],
        "filename": "tools/superorganism/src/runner.js",
        "package": "src"
      }
    ],
    "order": 0,
    "links": [],
    "workspace": "src"
  }
]