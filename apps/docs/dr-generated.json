[
  {
    "slugName": "fs",
    "pageSummary": "A Future-wrapped `fs` API, for future-based, lazy, easy-to-model asynchrony that makes it easy to manipulate the file system.",
    "filename": "packages/file-system/src/fs.js",
    "comments": [
      {
        "start": 15,
        "end": 17,
        "lines": [
          "@pageSummary A Future-wrapped `fs` API, for future-based, lazy, easy-to-model asynchrony that makes it easy to manipulate the file system."
        ],
        "summary": "@pageSummary A Future-wrapped `fs` API, for future-based, lazy, easy-to-model asynchrony that makes it easy to manipulate the file system.",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "pageSummary": [
            "A",
            "Future-wrapped",
            "`fs`",
            "API,",
            "for",
            "future-based,",
            "lazy,",
            "easy-to-model",
            "asynchrony",
            "that",
            "makes",
            "it",
            "easy",
            "to",
            "manipulate",
            "the",
            "file",
            "system."
          ]
        },
        "keywords": [
          "@pageSummary"
        ],
        "filename": "packages/file-system/src/fs.js"
      },
      {
        "start": 27,
        "end": 36,
        "lines": [
          "make a file string relative",
          "@name localize",
          "@example",
          "```js",
          "import { localize } from 'file-system'",
          "console.log(`support ${localize('business')}`)",
          "// support ./business",
          "```"
        ],
        "summary": "make a file string relative",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "localize",
          "example": "```js\nimport { localize } from 'file-system'\nconsole.log(`support ${localize('business')}`)\n// support ./business\n```"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/file-system/src/fs.js"
      },
      {
        "start": 39,
        "end": 53,
        "lines": [
          "Read a file asynchronously as a Future-wrapped value,",
          "given a file encoding and a cancellation function.",
          "@name readFileWithFormatAndCancel",
          "@see {@link readFileWithCancel}",
          "@see {@link readFile}",
          "@example",
          "```js",
          "import { fork } from 'fluture'",
          "import { readFile } from 'file-system'",
          "fork(console.warn)(console.log)(",
          "  readFileWithFormatAndCancel(() => process.exit(), 'utf32', './README.md')",
          ")",
          "```"
        ],
        "summary": "Read a file asynchronously as a Future-wrapped value,\ngiven a file encoding and a cancellation function.",
        "links": [
          "readFileWithCancel",
          "readFile"
        ],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "readFileWithFormatAndCancel",
          "see": [
            "readFileWithCancel",
            "readFile"
          ],
          "example": "```js\nimport { fork } from 'fluture'\nimport { readFile } from 'file-system'\nfork(console.warn)(console.log)(\n  readFileWithFormatAndCancel(() => process.exit(), 'utf32', './README.md')\n)\n```"
        },
        "keywords": [
          "@example",
          "@link",
          "@name",
          "@see"
        ],
        "filename": "packages/file-system/src/fs.js"
      },
      {
        "start": 61,
        "end": 73,
        "lines": [
          "Read a file asynchronously as a Future-wrapped value, given a cancellation function.",
          "Reads `utf8` files only, use `readFileWithFormatAndCancel` if another file encoding is needed.",
          "@name readFileWithCancel",
          "@see {@link readFileWithFormatAndCancel}",
          "@see {@link readFile}",
          "@example",
          "```js",
          "import { fork } from 'fluture'",
          "import { readFile } from 'file-system'",
          "fork(console.warn)(console.log)(readFileWithCancel(() => process.exit(), './README.md'))",
          "```"
        ],
        "summary": "Read a file asynchronously as a Future-wrapped value, given a cancellation function.\nReads `utf8` files only, use `readFileWithFormatAndCancel` if another file encoding is needed.",
        "links": [
          "readFileWithFormatAndCancel",
          "readFile"
        ],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "readFileWithCancel",
          "see": [
            "readFileWithFormatAndCancel",
            "readFile"
          ],
          "example": "```js\nimport { fork } from 'fluture'\nimport { readFile } from 'file-system'\nfork(console.warn)(console.log)(readFileWithCancel(() => process.exit(), './README.md'))\n```"
        },
        "keywords": [
          "@example",
          "@link",
          "@name",
          "@see"
        ],
        "filename": "packages/file-system/src/fs.js"
      },
      {
        "start": 77,
        "end": 88,
        "lines": [
          "Read a file asynchronously as a Future-wrapped value",
          "@name readFile",
          "@see {@link readFileWithFormatAndCancel}",
          "@see {@link readFile}",
          "@example",
          "```js",
          "import { fork } from 'fluture'",
          "import { readFile } from 'file-system'",
          "fork(console.warn)(console.log)(readFile('./README.md'))",
          "```"
        ],
        "summary": "Read a file asynchronously as a Future-wrapped value",
        "links": [
          "readFileWithFormatAndCancel",
          "readFile"
        ],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "readFile",
          "see": [
            "readFileWithFormatAndCancel",
            "readFile"
          ],
          "example": "```js\nimport { fork } from 'fluture'\nimport { readFile } from 'file-system'\nfork(console.warn)(console.log)(readFile('./README.md'))\n```"
        },
        "keywords": [
          "@example",
          "@link",
          "@name",
          "@see"
        ],
        "filename": "packages/file-system/src/fs.js"
      },
      {
        "start": 91,
        "end": 102,
        "lines": [
          "Read a JSON file asynchronously as a Future-wrapped value, given a cancellation function",
          "@name readJSONFileWithCancel",
          "@see {@link readFile}",
          "@see {@link readJSONFile}",
          "@example",
          "```js",
          "import { fork } from 'fluture'",
          "import { readJSONFile } from 'file-system'",
          "fork(console.warn)(console.log)(readJSONFile('./package.json'))",
          "```"
        ],
        "summary": "Read a JSON file asynchronously as a Future-wrapped value, given a cancellation function",
        "links": [
          "readFile",
          "readJSONFile"
        ],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "readJSONFileWithCancel",
          "see": [
            "readFile",
            "readJSONFile"
          ],
          "example": "```js\nimport { fork } from 'fluture'\nimport { readJSONFile } from 'file-system'\nfork(console.warn)(console.log)(readJSONFile('./package.json'))\n```"
        },
        "keywords": [
          "@example",
          "@link",
          "@name",
          "@see"
        ],
        "filename": "packages/file-system/src/fs.js"
      },
      {
        "start": 107,
        "end": 118,
        "lines": [
          "Read a JSON file asynchronously as a Future-wrapped value",
          "@name readJSONFile",
          "@see {@link readFile}",
          "@see {@link readJSONFileWithCancel}",
          "@example",
          "```js",
          "import { fork } from 'fluture'",
          "import { readJSONFile } from 'file-system'",
          "fork(console.warn)(console.log)(readJSONFile('./package.json'))",
          "```"
        ],
        "summary": "Read a JSON file asynchronously as a Future-wrapped value",
        "links": [
          "readFile",
          "readJSONFileWithCancel"
        ],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "readJSONFile",
          "see": [
            "readFile",
            "readJSONFileWithCancel"
          ],
          "example": "```js\nimport { fork } from 'fluture'\nimport { readJSONFile } from 'file-system'\nfork(console.warn)(console.log)(readJSONFile('./package.json'))\n```"
        },
        "keywords": [
          "@example",
          "@link",
          "@name",
          "@see"
        ],
        "filename": "packages/file-system/src/fs.js"
      },
      {
        "start": 121,
        "end": 137,
        "lines": [
          "Read a glob asynchronously as a Future-wrapped value,",
          "with configuration and a cancellation function.",
          "Configuration is passed to [glob](https://www.npmjs.com/package/glob)",
          "@name readDirWithConfigAndCancel",
          "@see {@link @readDirWithConfig}",
          "@see {@link @readDir}",
          "@example",
          "```js",
          "import { fork } from 'fluture'",
          "import { readDirWithConfigAndCancel } from 'file-system'",
          "// [...]",
          "pipe(",
          "  fork(console.warn)(console.log)",
          ")(readDirWithConfigAndCancel(cancellationFn, { ignore: ['node_modules/**'] }, 'src/*'))",
          "```"
        ],
        "summary": "Read a glob asynchronously as a Future-wrapped value,\nwith configuration and a cancellation function.\nConfiguration is passed to [glob](https://www.npmjs.com/package/glob)",
        "links": [
          "@readDirWithConfig",
          "@readDir"
        ],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "readDirWithConfigAndCancel",
          "see": [
            "readDirWithConfig",
            "readDir"
          ],
          "example": "```js\nimport { fork } from 'fluture'\nimport { readDirWithConfigAndCancel } from 'file-system'\n// [...]\npipe(\n  fork(console.warn)(console.log)\n)(readDirWithConfigAndCancel(cancellationFn, { ignore: ['node_modules/**'] }, 'src/*'))\n```"
        },
        "keywords": [
          "@example",
          "@link",
          "@name",
          "@readDir",
          "@readDirWithConfig",
          "@see"
        ],
        "filename": "packages/file-system/src/fs.js"
      },
      {
        "start": 152,
        "end": 167,
        "lines": [
          "Read a glob asynchronously as a Future-wrapped value, with configuration.",
          "Configuration is passed to [glob](https://www.npmjs.com/package/glob)",
          "@name readDirWithConfig",
          "@see {@link @readDirWithConfigAndCancel}",
          "@see {@link @readDir}",
          "@example",
          "```js",
          "import { fork } from 'fluture'",
          "import { readDirWithConfig } from 'file-system'",
          "// [...]",
          "pipe(",
          "  fork(console.warn)(console.log)",
          ")(readDirWithConfig({ ignore: ['node_modules/**'] }, 'src/*'))",
          "```"
        ],
        "summary": "Read a glob asynchronously as a Future-wrapped value, with configuration.\nConfiguration is passed to [glob](https://www.npmjs.com/package/glob)",
        "links": [
          "@readDirWithConfigAndCancel",
          "@readDir"
        ],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "readDirWithConfig",
          "see": [
            "readDirWithConfigAndCancel",
            "readDir"
          ],
          "example": "```js\nimport { fork } from 'fluture'\nimport { readDirWithConfig } from 'file-system'\n// [...]\npipe(\n  fork(console.warn)(console.log)\n)(readDirWithConfig({ ignore: ['node_modules/**'] }, 'src/*'))\n```"
        },
        "keywords": [
          "@example",
          "@link",
          "@name",
          "@readDir",
          "@readDirWithConfigAndCancel",
          "@see"
        ],
        "filename": "packages/file-system/src/fs.js"
      },
      {
        "start": 170,
        "end": 184,
        "lines": [
          "Read a glob asynchronously as a Future-wrapped value, default config assumed.",
          "Configuration is passed to [glob](https://www.npmjs.com/package/glob)",
          "@name readDir",
          "@see {@link @readDirWithConfigAndCancel}",
          "@see {@link @readDirWithConfig}",
          "@name readDir",
          "@example",
          "```js",
          "import { fork } from 'fluture'",
          "import { readDir } from 'file-system'",
          "// [...]",
          "fork(console.warn)(console.log)(readDir('src/*'))",
          "```"
        ],
        "summary": "Read a glob asynchronously as a Future-wrapped value, default config assumed.\nConfiguration is passed to [glob](https://www.npmjs.com/package/glob)",
        "links": [
          "@readDirWithConfigAndCancel",
          "@readDirWithConfig"
        ],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": [
            "readDir",
            "readDir"
          ],
          "see": [
            "readDirWithConfigAndCancel",
            "readDirWithConfig"
          ],
          "example": "```js\nimport { fork } from 'fluture'\nimport { readDir } from 'file-system'\n// [...]\nfork(console.warn)(console.log)(readDir('src/*'))\n```"
        },
        "keywords": [
          "@example",
          "@link",
          "@name",
          "@readDirWithConfig",
          "@readDirWithConfigAndCancel",
          "@see"
        ],
        "filename": "packages/file-system/src/fs.js"
      },
      {
        "start": 187,
        "end": 207,
        "lines": [
          "Write to a file, with configuration and a cancellation function.",
          "Unlike `fs.writeFile`, this will return the written value as a Future-wrapped value.",
          "@name writeFileWithConfigAndCancel",
          "@see {@link @writeFileWithConfig}",
          "@see {@link @writeFile}",
          "@example",
          "```js",
          "import { fork } from 'fluture'",
          "import { writeFileWithConfig } from 'file-system'",
          "// [...]",
          "fork(console.warn)(console.log)(",
          "  writeFileWithConfigAndCancel(",
          "    cancellationFunction,",
          "    { ...fs.writeFileConfig },",
          "    'my-file.txt',",
          "    'hey I am a file'",
          "  )",
          ")",
          "```"
        ],
        "summary": "Write to a file, with configuration and a cancellation function.\nUnlike `fs.writeFile`, this will return the written value as a Future-wrapped value.",
        "links": [
          "@writeFileWithConfig",
          "@writeFile"
        ],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "writeFileWithConfigAndCancel",
          "see": [
            "writeFileWithConfig",
            "writeFile"
          ],
          "example": "```js\nimport { fork } from 'fluture'\nimport { writeFileWithConfig } from 'file-system'\n// [...]\nfork(console.warn)(console.log)(\n  writeFileWithConfigAndCancel(\n    cancellationFunction,\n    { ...fs.writeFileConfig },\n    'my-file.txt',\n    'hey I am a file'\n  )\n)\n```"
        },
        "keywords": [
          "@example",
          "@link",
          "@name",
          "@see",
          "@writeFile",
          "@writeFileWithConfig"
        ],
        "filename": "packages/file-system/src/fs.js"
      },
      {
        "start": 222,
        "end": 241,
        "lines": [
          "Write to a file, with configuration.",
          "Unlike `fs.writeFile`, this will return the written value as a Future-wrapped value.",
          "@name writeFileWithConfig",
          "@see {@link @writeFileWithConfigAndCancel}",
          "@see {@link @writeFile}",
          "@example",
          "```js",
          "import { fork } from 'fluture'",
          "import { writeFileWithConfig } from 'file-system'",
          "// [...]",
          "fork(console.warn)(console.log)(",
          "  writeFileWithConfig(",
          "    { encoding: 'utf8' },",
          "    'my-file.txt',",
          "    'hey I am a file'",
          "  )",
          ")",
          "```"
        ],
        "summary": "Write to a file, with configuration.\nUnlike `fs.writeFile`, this will return the written value as a Future-wrapped value.",
        "links": [
          "@writeFileWithConfigAndCancel",
          "@writeFile"
        ],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "writeFileWithConfig",
          "see": [
            "writeFileWithConfigAndCancel",
            "writeFile"
          ],
          "example": "```js\nimport { fork } from 'fluture'\nimport { writeFileWithConfig } from 'file-system'\n// [...]\nfork(console.warn)(console.log)(\n  writeFileWithConfig(\n    { encoding: 'utf8' },\n    'my-file.txt',\n    'hey I am a file'\n  )\n)\n```"
        },
        "keywords": [
          "@example",
          "@link",
          "@name",
          "@see",
          "@writeFile",
          "@writeFileWithConfigAndCancel"
        ],
        "filename": "packages/file-system/src/fs.js"
      },
      {
        "start": 244,
        "end": 262,
        "lines": [
          "Write to a file, assuming `'utf8'`.",
          "Unlike `fs.writeFile`, this will return the written value as a Future-wrapped value.",
          "@name writeFile",
          "@see {@link @writeFileWithConfigAndCancel}",
          "@see {@link @writeFileWithConfig}",
          "@example",
          "```js",
          "import { fork } from 'fluture'",
          "import { writeFileWithConfig } from 'file-system'",
          "// [...]",
          "fork(console.warn)(console.log)(",
          "  writeFileWithConfig(",
          "    'my-file.txt',",
          "    'hey I am a file'",
          "  )",
          ")",
          "```"
        ],
        "summary": "Write to a file, assuming `'utf8'`.\nUnlike `fs.writeFile`, this will return the written value as a Future-wrapped value.",
        "links": [
          "@writeFileWithConfigAndCancel",
          "@writeFileWithConfig"
        ],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "writeFile",
          "see": [
            "writeFileWithConfigAndCancel",
            "writeFileWithConfig"
          ],
          "example": "```js\nimport { fork } from 'fluture'\nimport { writeFileWithConfig } from 'file-system'\n// [...]\nfork(console.warn)(console.log)(\n  writeFileWithConfig(\n    'my-file.txt',\n    'hey I am a file'\n  )\n)\n```"
        },
        "keywords": [
          "@example",
          "@link",
          "@name",
          "@see",
          "@writeFileWithConfig",
          "@writeFileWithConfigAndCancel"
        ],
        "filename": "packages/file-system/src/fs.js"
      },
      {
        "start": 265,
        "end": 284,
        "lines": [
          "Remove a file, configurably, with cancellation.",
          "Unlike `fs.rm`, this returns the path of the deleted file as a Future-wrapped string.",
          "@name removeFileWithConfigAndCancel",
          "@see {@link removeFileWithConfig}",
          "@see {@link removeFile}",
          "@example",
          "```js",
          "import { fork } from 'fluture'",
          "import { removeFileWithConfigAndCancel } from 'file-system'",
          "// [...]",
          "fork(console.warn)(console.log)(",
          "  removeFileWithConfigAndCancel(",
          "    cancellationFn,",
          "    { ...fs.removeFileConfig },",
          "    'my-file.txt'",
          "  )",
          ")",
          "```"
        ],
        "summary": "Remove a file, configurably, with cancellation.\nUnlike `fs.rm`, this returns the path of the deleted file as a Future-wrapped string.",
        "links": [
          "removeFileWithConfig",
          "removeFile"
        ],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "removeFileWithConfigAndCancel",
          "see": [
            "removeFileWithConfig",
            "removeFile"
          ],
          "example": "```js\nimport { fork } from 'fluture'\nimport { removeFileWithConfigAndCancel } from 'file-system'\n// [...]\nfork(console.warn)(console.log)(\n  removeFileWithConfigAndCancel(\n    cancellationFn,\n    { ...fs.removeFileConfig },\n    'my-file.txt'\n  )\n)\n```"
        },
        "keywords": [
          "@example",
          "@link",
          "@name",
          "@see"
        ],
        "filename": "packages/file-system/src/fs.js"
      },
      {
        "start": 292,
        "end": 310,
        "lines": [
          "Remove a file, configurably.",
          "Unlike `fs.rm`, this returns the path of the deleted file as a Future-wrapped string.",
          "@name removeFileWithConfig",
          "@see {@link removeFileWithConfigAndCancel}",
          "@see {@link removeFile}",
          "@example",
          "```js",
          "import { fork } from 'fluture'",
          "import { removeFileWithConfig } from 'file-system'",
          "// [...]",
          "fork(console.warn)(console.log)(",
          "  removeFileWithConfig(",
          "    { ...fs.removeFileConfig },",
          "    'my-file.txt'",
          "  )",
          ")",
          "```"
        ],
        "summary": "Remove a file, configurably.\nUnlike `fs.rm`, this returns the path of the deleted file as a Future-wrapped string.",
        "links": [
          "removeFileWithConfigAndCancel",
          "removeFile"
        ],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "removeFileWithConfig",
          "see": [
            "removeFileWithConfigAndCancel",
            "removeFile"
          ],
          "example": "```js\nimport { fork } from 'fluture'\nimport { removeFileWithConfig } from 'file-system'\n// [...]\nfork(console.warn)(console.log)(\n  removeFileWithConfig(\n    { ...fs.removeFileConfig },\n    'my-file.txt'\n  )\n)\n```"
        },
        "keywords": [
          "@example",
          "@link",
          "@name",
          "@see"
        ],
        "filename": "packages/file-system/src/fs.js"
      },
      {
        "start": 321,
        "end": 338,
        "lines": [
          "Remove a file.",
          "Unlike `fs.rm`, this returns the path of the deleted file as a Future-wrapped string.",
          "@name removeFile",
          "@see {@link removeFileWithConfigAndCancel}",
          "@see {@link removeFileWithConfig}",
          "@example",
          "```js",
          "import { fork } from 'fluture'",
          "import { removeFile } from 'file-system'",
          "// [...]",
          "fork(console.warn)(console.log)(",
          "  removeFile(",
          "    'my-file.txt'",
          "  )",
          ")",
          "```"
        ],
        "summary": "Remove a file.\nUnlike `fs.rm`, this returns the path of the deleted file as a Future-wrapped string.",
        "links": [
          "removeFileWithConfigAndCancel",
          "removeFileWithConfig"
        ],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "removeFile",
          "see": [
            "removeFileWithConfigAndCancel",
            "removeFileWithConfig"
          ],
          "example": "```js\nimport { fork } from 'fluture'\nimport { removeFile } from 'file-system'\n// [...]\nfork(console.warn)(console.log)(\n  removeFile(\n    'my-file.txt'\n  )\n)\n```"
        },
        "keywords": [
          "@example",
          "@link",
          "@name",
          "@see"
        ],
        "filename": "packages/file-system/src/fs.js"
      },
      {
        "start": 341,
        "end": 359,
        "lines": [
          "Remove multiple files, configurably, with a cancellation function.",
          "@name removeFilesWithConfigAndCancel",
          "@see {@link removeFilesWithConfig}",
          "@see {@link removeFiles}",
          "@example",
          "```js",
          "import { fork } from 'fluture'",
          "import { removeFilesWithConfig } from 'file-system'",
          "// [...]",
          "fork(console.warn)(console.log)(",
          "  removeFilesWithConfigAndCancel(",
          "    cancellationFn,",
          "    { parallel: 30 },",
          "    [...list, ...of, ...thirty, ...files]",
          "  )",
          ")",
          "```"
        ],
        "summary": "Remove multiple files, configurably, with a cancellation function.",
        "links": [
          "removeFilesWithConfig",
          "removeFiles"
        ],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "removeFilesWithConfigAndCancel",
          "see": [
            "removeFilesWithConfig",
            "removeFiles"
          ],
          "example": "```js\nimport { fork } from 'fluture'\nimport { removeFilesWithConfig } from 'file-system'\n// [...]\nfork(console.warn)(console.log)(\n  removeFilesWithConfigAndCancel(\n    cancellationFn,\n    { parallel: 30 },\n    [...list, ...of, ...thirty, ...files]\n  )\n)\n```"
        },
        "keywords": [
          "@example",
          "@link",
          "@name",
          "@see"
        ],
        "filename": "packages/file-system/src/fs.js"
      },
      {
        "start": 367,
        "end": 384,
        "lines": [
          "Remove multiple files, configurably.",
          "@name removeFilesWithConfig",
          "@see {@link removeFilesWithConfigAndCancel}",
          "@see {@link removeFiles}",
          "@example",
          "```js",
          "import { fork } from 'fluture'",
          "import { DEFAULT_REMOVAL_CONFIG, removeFilesWithConfig } from 'file-system'",
          "// [...]",
          "fork(console.warn)(console.log)(",
          "  removeFilesWithConfig(",
          "    DEFAULT_REMOVAL_CONFIG,",
          "    [...list, ...of, ...thirty, ...files]",
          "  )",
          ")",
          "```"
        ],
        "summary": "Remove multiple files, configurably.",
        "links": [
          "removeFilesWithConfigAndCancel",
          "removeFiles"
        ],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "removeFilesWithConfig",
          "see": [
            "removeFilesWithConfigAndCancel",
            "removeFiles"
          ],
          "example": "```js\nimport { fork } from 'fluture'\nimport { DEFAULT_REMOVAL_CONFIG, removeFilesWithConfig } from 'file-system'\n// [...]\nfork(console.warn)(console.log)(\n  removeFilesWithConfig(\n    DEFAULT_REMOVAL_CONFIG,\n    [...list, ...of, ...thirty, ...files]\n  )\n)\n```"
        },
        "keywords": [
          "@example",
          "@link",
          "@name",
          "@see"
        ],
        "filename": "packages/file-system/src/fs.js"
      },
      {
        "start": 387,
        "end": 403,
        "lines": [
          "Remove multiple files, configurably.",
          "@name removeFilesWithConfig",
          "@see {@link removeFilesWithConfigAndCancel}",
          "@see {@link removeFiles}",
          "@example",
          "```js",
          "import { fork } from 'fluture'",
          "import { removeFilesWithConfig } from 'file-system'",
          "// [...]",
          "fork(console.warn)(console.log)(",
          "  removeFilesWithConfig(",
          "    [...list, ...of, ...thirty, ...files]",
          "  )",
          ")",
          "```"
        ],
        "summary": "Remove multiple files, configurably.",
        "links": [
          "removeFilesWithConfigAndCancel",
          "removeFiles"
        ],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "removeFilesWithConfig",
          "see": [
            "removeFilesWithConfigAndCancel",
            "removeFiles"
          ],
          "example": "```js\nimport { fork } from 'fluture'\nimport { removeFilesWithConfig } from 'file-system'\n// [...]\nfork(console.warn)(console.log)(\n  removeFilesWithConfig(\n    [...list, ...of, ...thirty, ...files]\n  )\n)\n```"
        },
        "keywords": [
          "@example",
          "@link",
          "@name",
          "@see"
        ],
        "filename": "packages/file-system/src/fs.js"
      },
      {
        "start": 406,
        "end": 425,
        "lines": [
          "Make a directory, given a cancellation function.",
          "Returns a Future-wrapped file path as a discrete value upon success.",
          "@name mkdirWithCancel",
          "@see {@link mkdir}",
          "@see {@link mkdirp}",
          "@example",
          "```js",
          "import { fork } from 'fluture'",
          "import { mkdirWithCancel } from 'file-system'",
          "// [...]",
          "fork(console.warn)(console.log)(",
          "  mkdirWithCancel(",
          "    () => {},",
          "    {},",
          "    'my-dir'",
          "  )",
          ")",
          "```"
        ],
        "summary": "Make a directory, given a cancellation function.\nReturns a Future-wrapped file path as a discrete value upon success.",
        "links": [
          "mkdir",
          "mkdirp"
        ],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "mkdirWithCancel",
          "see": [
            "mkdir",
            "mkdirp"
          ],
          "example": "```js\nimport { fork } from 'fluture'\nimport { mkdirWithCancel } from 'file-system'\n// [...]\nfork(console.warn)(console.log)(\n  mkdirWithCancel(\n    () => {},\n    {},\n    'my-dir'\n  )\n)\n```"
        },
        "keywords": [
          "@example",
          "@link",
          "@name",
          "@see"
        ],
        "filename": "packages/file-system/src/fs.js"
      },
      {
        "start": 433,
        "end": 451,
        "lines": [
          "Make a directory",
          "Returns a Future-wrapped file path as a discrete value upon success.",
          "@name mkdir",
          "@see {@link mkdirWithCancel}",
          "@see {@link mkdirp}",
          "@example",
          "```js",
          "import { fork } from 'fluture'",
          "import { mkdir } from 'file-system'",
          "// [...]",
          "fork(console.warn)(console.log)(",
          "  mkdir(",
          "    {},",
          "    'my-dir'",
          "  )",
          ")",
          "```"
        ],
        "summary": "Make a directory\nReturns a Future-wrapped file path as a discrete value upon success.",
        "links": [
          "mkdirWithCancel",
          "mkdirp"
        ],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "mkdir",
          "see": [
            "mkdirWithCancel",
            "mkdirp"
          ],
          "example": "```js\nimport { fork } from 'fluture'\nimport { mkdir } from 'file-system'\n// [...]\nfork(console.warn)(console.log)(\n  mkdir(\n    {},\n    'my-dir'\n  )\n)\n```"
        },
        "keywords": [
          "@example",
          "@link",
          "@name",
          "@see"
        ],
        "filename": "packages/file-system/src/fs.js"
      },
      {
        "start": 454,
        "end": 472,
        "lines": [
          "Make a directory, recursively.",
          "Returns a Future-wrapped file path as a discrete value upon success.",
          "@name mkdirp",
          "@see {@link mkdirWithCancel}",
          "@see {@link mkdir}",
          "@example",
          "```js",
          "import { fork } from 'fluture'",
          "import { mkdir } from 'file-system'",
          "// [...]",
          "fork(console.warn)(console.log)(",
          "  mkdir(",
          "    {},",
          "    'my-dir'",
          "  )",
          ")",
          "```"
        ],
        "summary": "Make a directory, recursively.\nReturns a Future-wrapped file path as a discrete value upon success.",
        "links": [
          "mkdirWithCancel",
          "mkdir"
        ],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "mkdirp",
          "see": [
            "mkdirWithCancel",
            "mkdir"
          ],
          "example": "```js\nimport { fork } from 'fluture'\nimport { mkdir } from 'file-system'\n// [...]\nfork(console.warn)(console.log)(\n  mkdir(\n    {},\n    'my-dir'\n  )\n)\n```"
        },
        "keywords": [
          "@example",
          "@link",
          "@name",
          "@see"
        ],
        "filename": "packages/file-system/src/fs.js"
      },
      {
        "start": 488,
        "end": 503,
        "lines": [
          "Write a file to a nested folder and automatically create needed folders, akin to `mkdir -p`",
          "@name writeFileWithAutoPath",
          "@example",
          "```js",
          "import { fork } from 'fluture'",
          "import { writeFileWithAutoPath } from 'file-system'",
          "// [...]",
          "fork(console.warn)(console.log)(",
          "  writeFileWithAutoPath(",
          "    \"folders/you/must/exist/file.biz\",",
          "    \"my cool content\"",
          "  )",
          ")",
          "```"
        ],
        "summary": "Write a file to a nested folder and automatically create needed folders, akin to `mkdir -p`",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "writeFileWithAutoPath",
          "example": "```js\nimport { fork } from 'fluture'\nimport { writeFileWithAutoPath } from 'file-system'\n// [...]\nfork(console.warn)(console.log)(\n  writeFileWithAutoPath(\n    \"folders/you/must/exist/file.biz\",\n    \"my cool content\"\n  )\n)\n```"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/file-system/src/fs.js"
      }
    ],
    "order": 0,
    "links": [
      "readFileWithCancel",
      "readFile",
      "readFileWithFormatAndCancel",
      "readFile",
      "readFileWithFormatAndCancel",
      "readFile",
      "readFile",
      "readJSONFile",
      "readFile",
      "readJSONFileWithCancel",
      "@readDirWithConfig",
      "@readDir",
      "@readDirWithConfigAndCancel",
      "@readDir",
      "@readDirWithConfigAndCancel",
      "@readDirWithConfig",
      "@writeFileWithConfig",
      "@writeFile",
      "@writeFileWithConfigAndCancel",
      "@writeFile",
      "@writeFileWithConfigAndCancel",
      "@writeFileWithConfig",
      "removeFileWithConfig",
      "removeFile",
      "removeFileWithConfigAndCancel",
      "removeFile",
      "removeFileWithConfigAndCancel",
      "removeFileWithConfig",
      "removeFilesWithConfig",
      "removeFiles",
      "removeFilesWithConfigAndCancel",
      "removeFiles",
      "removeFilesWithConfigAndCancel",
      "removeFiles",
      "mkdir",
      "mkdirp",
      "mkdirWithCancel",
      "mkdirp",
      "mkdirWithCancel",
      "mkdir"
    ],
    "workspace": "file-system"
  },
  {
    "slugName": "helpers",
    "pageTitle": "helpers",
    "pageSummary": "Built-in helpers for making custom plugins more robust. The \"helpers\" are the third parameter passed to a custom plugin's function.",
    "filename": "packages/monorail/src/helpers.js",
    "comments": [
      {
        "start": 21,
        "end": 24,
        "lines": [
          "@pageSummary Built-in helpers for making custom plugins more robust. The \"helpers\" are the third parameter passed to a custom plugin's function.",
          "@page helpers"
        ],
        "summary": "@pageSummary Built-in helpers for making custom plugins more robust. The \"helpers\" are the third parameter passed to a custom plugin's function.",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "pageSummary": [
            "Built-in",
            "helpers",
            "for",
            "making",
            "custom",
            "plugins",
            "more",
            "robust.",
            "The",
            "\"helpers\"",
            "are",
            "the",
            "third",
            "parameter",
            "passed",
            "to",
            "a",
            "custom",
            "plugin's",
            "function."
          ],
          "page": "helpers",
          "name": "helpers",
          "detail": 21
        },
        "keywords": [
          "@page",
          "@pageSummary"
        ],
        "filename": "packages/monorail/src/helpers.js"
      },
      {
        "start": 32,
        "end": 43,
        "lines": [
          "Use this helper to test a regex that matches against any single incidence on any line",
          "@name any",
          "@example",
          "```js",
          "const plugin = {",
          "  name: 'get-const',",
          "  fn: (state, file, { any }) => any(/const/)",
          "}",
          "export default plugin",
          "```"
        ],
        "summary": "Use this helper to test a regex that matches against any single incidence on any line",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "any",
          "example": "```js\nconst plugin = {\n  name: 'get-const',\n  fn: (state, file, { any }) => any(/const/)\n}\nexport default plugin\n```"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/monorail/src/helpers.js"
      },
      {
        "start": 46,
        "end": 56,
        "lines": [
          "Use this helper to test a regex that matches and filters against every line",
          "@name lines",
          "@example",
          "```js",
          "export default {",
          "  name: 'unexported-consts',",
          "  fn: (state, file, { lines }) => lines(/^const/)",
          "}",
          "```"
        ],
        "summary": "Use this helper to test a regex that matches and filters against every line",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "lines",
          "example": "```js\nexport default {\n  name: 'unexported-consts',\n  fn: (state, file, { lines }) => lines(/^const/)\n}\n```"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/monorail/src/helpers.js"
      },
      {
        "start": 61,
        "end": 71,
        "lines": [
          "Use this helper to test a regex that matches and finds the first matching line",
          "@name line",
          "@example",
          "```js",
          "export default {",
          "  name: 'exported-default',",
          "  fn: (state, file, { line }) => line(/export default/g)",
          "}",
          "```"
        ],
        "summary": "Use this helper to test a regex that matches and finds the first matching line",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "line",
          "example": "```js\nexport default {\n  name: 'exported-default',\n  fn: (state, file, { line }) => line(/export default/g)\n}\n```"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/monorail/src/helpers.js"
      },
      {
        "start": 76,
        "end": 86,
        "lines": [
          "Use this helper to test a regex that matches and finds the last matching line",
          "@name lastLine",
          "@example",
          "```js",
          "export default {",
          "  name: 'exported-last',",
          "  fn: (state, file, { lastLine }) => lastLine(/export/g)",
          "}",
          "```"
        ],
        "summary": "Use this helper to test a regex that matches and finds the last matching line",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "lastLine",
          "example": "```js\nexport default {\n  name: 'exported-last',\n  fn: (state, file, { lastLine }) => lastLine(/export/g)\n}\n```"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/monorail/src/helpers.js"
      },
      {
        "start": 91,
        "end": 101,
        "lines": [
          "Use this helper to select content between two repeating regular expressions",
          "@name between",
          "@example",
          "```js",
          "export default {",
          "  name: 'expanded-imports',",
          "  fn: (state, file, { between }) => between(/^import/, /from (.*)/)",
          "}",
          "```"
        ],
        "summary": "Use this helper to select content between two repeating regular expressions",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "between",
          "example": "```js\nexport default {\n  name: 'expanded-imports',\n  fn: (state, file, { between }) => between(/^import/, /from (.*)/)\n}\n```"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/monorail/src/helpers.js"
      },
      {
        "start": 114,
        "end": 124,
        "lines": [
          "Use this helper to select all content between two repeating regular expressions",
          "@name selectAll",
          "@example",
          "```js",
          "export default {",
          "  name: 'expanded-imports',",
          "  fn: (state, file, { selectAll }) => selectAll(/^import/, /from (.*)/)",
          "}",
          "```"
        ],
        "summary": "Use this helper to select all content between two repeating regular expressions",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "selectAll",
          "example": "```js\nexport default {\n  name: 'expanded-imports',\n  fn: (state, file, { selectAll }) => selectAll(/^import/, /from (.*)/)\n}\n```"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/monorail/src/helpers.js"
      },
      {
        "start": 162,
        "end": 173,
        "lines": [
          "Use this helper to easily reduce over all lines and aggregate a value",
          "@name reduce",
          "@example",
          "```js",
          "const plugin = {",
          "  name: 'select-specifics',",
          "  fn: (state, file, { reduce }) => reduce((agg, [line, content]) => content.length > 10 : agg.concat(content) : agg, [])",
          "}",
          "export default plugin",
          "```"
        ],
        "summary": "Use this helper to easily reduce over all lines and aggregate a value",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "reduce",
          "example": "```js\nconst plugin = {\n  name: 'select-specifics',\n  fn: (state, file, { reduce }) => reduce((agg, [line, content]) => content.length > 10 : agg.concat(content) : agg, [])\n}\nexport default plugin\n```"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/monorail/src/helpers.js"
      },
      {
        "start": 178,
        "end": 191,
        "lines": [
          "Use this helper to easily filter all lines related to a given regular expression",
          "@name filter",
          "@example",
          "```js",
          "const plugin = {",
          "  name: 'keyword-match',",
          "  fn: (state, file, { config, filter }) => filter(",
          "    config?.keyword ?? /monorail/",
          "  )",
          "}",
          "export default plugin",
          "```"
        ],
        "summary": "Use this helper to easily filter all lines related to a given regular expression",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "filter",
          "example": "```js\nconst plugin = {\n  name: 'keyword-match',\n  fn: (state, file, { config, filter }) => filter(\n    config?.keyword ?? /monorail/\n  )\n}\nexport default plugin\n```"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/monorail/src/helpers.js"
      },
      {
        "start": 205,
        "end": 218,
        "lines": [
          "The `config` value is patched in so that it is easier to pass values from the rulefile configuration to the plugins themselves, scoped to the plugin name.",
          "@name config",
          "@example",
          "```js",
          "const plugin = {",
          "  name: 'keyword-match',",
          "  fn: (state, file, { filter, config }) => filter(",
          "    config?.keyword ?? /monorail/",
          "  )",
          "}",
          "export default plugin",
          "```"
        ],
        "summary": "The `config` value is patched in so that it is easier to pass values from the rulefile configuration to the plugins themselves, scoped to the plugin name.",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "config",
          "example": "```js\nconst plugin = {\n  name: 'keyword-match',\n  fn: (state, file, { filter, config }) => filter(\n    config?.keyword ?? /monorail/\n  )\n}\nexport default plugin\n```"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "packages/monorail/src/helpers.js"
      }
    ],
    "order": 0,
    "links": [],
    "workspace": "monorail"
  }
]