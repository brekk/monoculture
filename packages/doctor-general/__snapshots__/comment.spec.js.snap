// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`processCurriedComment 1`] = `
[
  {
    "addTo": "",
    "end": 49,
    "fileGroup": "",
    "keywords": [
      "@curried",
      "@example",
      "@future",
    ],
    "lines": [
      "/**",
      "Consume external commands as a Future-wrapped value.",
      "@future",
      "@curried",
      " 1. execWithConfig - Passes all possible configuration values plus a cancellation function.",
      " *",
      "    @example",
      "    \`\`\`js",
      "    import { execWithConfig } from 'kiddo'",
      "    import { fork } from 'fluture'",
      "    fork(console.warn)(console.log)(",
      "      execWithConfig(",
      "        function customCancellationFunction() {},",
      "        'echo',",
      "        { cleanup: true },",
      "        ['ahoy']",
      "      )",
      "    )",
      "    \`\`\`",
      " *",
      " 2. execWithCancel - Eschews any configuration and instead only expects a cancellation function, command and arguments.",
      " *",
      "    @example",
      "    \`\`\`js",
      "    import { execWithCancel } from 'kiddo'",
      "    import { fork } from 'fluture'",
      "    fork(console.warn)(console.log)(",
      "      execWithCancel(",
      "        function customCancellationFunction() {},",
      "        'echo',",
      "        ['ahoy']",
      "      )",
      "    )",
      "    \`\`\`",
      " *",
      " 3. exec - Eschews any configuration or cancellation function. Needs only command and arguments.",
      " *",
      "    @example",
      "    \`\`\`js test=true",
      "    import { fork } from 'fluture'",
      "    // drgen-import-above",
      "    const blah = Math.round(Math.random() * 100000)",
      "    fork(done)(z => {",
      "      expect(z.stdout).toEqual('' + blah)",
      "      done()",
      "    })(exec('echo', [blah]))",
      "    \`\`\`",
    ],
    "links": [],
    "start": 1,
    "structure": {
      "curried": [
        {
          "lines": "\`\`\`js
    import { execWithConfig } from 'kiddo'
    import { fork } from 'fluture'
    fork(console.warn)(console.log)(
      execWithConfig(
        function customCancellationFunction() {},
        'echo',
        { cleanup: true },
        ['ahoy']
      )
    )
\`\`\`",
          "name": "execWithConfig",
          "summary": "Passes all possible configuration values plus a cancellation function.",
        },
        {
          "lines": "\`\`\`js
    import { execWithCancel } from 'kiddo'
    import { fork } from 'fluture'
    fork(console.warn)(console.log)(
      execWithCancel(
        function customCancellationFunction() {},
        'echo',
        ['ahoy']
      )
    )
\`\`\`",
          "name": "execWithCancel",
          "summary": "Eschews any configuration and instead only expects a cancellation function, command and arguments.",
        },
        {
          "lines": "\`\`\`js test=true
    import { fork } from 'fluture'
    // drgen-import-above
    const blah = Math.round(Math.random() * 100000)
    fork(done)(z => {
      expect(z.stdout).toEqual('' + blah)
      done()
    })(exec('echo', [blah]))
\`\`\`",
          "name": "exec",
          "summary": "Eschews any configuration or cancellation function. Needs only command and arguments.",
        },
      ],
      "description": "Consume external commands as a Future-wrapped value.",
      "future": true,
    },
    "summary": "Consume external commands as a Future-wrapped value.",
  },
]
`;
