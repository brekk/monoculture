import { histograph, correlateSimilar } from './stats'

const X = {
  file: 'src/core.js',
  lines: [
    {
      line: 1,
      content: ['histograph', 'correlateSimilar'],
      classification: ['text', 'content'],
    },
    {
      line: 4,
      content: ['mergeRight'],
      classification: ['content'],
    },
    {
      line: 5,
      content: ['curry'],
      classification: ['text'],
    },
    {
      line: 6,
      content: ['equals'],
      classification: ['text'],
    },
    {
      line: 7,
      content: ['identity', 'I'],
      classification: ['text', 'constant'],
    },
    {
      line: 9,
      content: ['pipe'],
      classification: ['text'],
    },
    {
      line: 10,
      content: ['reject'],
      classification: ['text'],
    },
    {
      line: 11,
      content: ['replace'],
      classification: ['text'],
    },
    {
      line: 12,
      content: ['split'],
      classification: ['text'],
    },
    {
      line: 13,
      content: ['startsWith'],
      classification: ['content'],
    },
    {
      line: 14,
      content: ['trim'],
      classification: ['text'],
    },
    {
      line: 16,
      content: ['yargsParser'],
      classification: ['content'],
    },
    {
      line: 18,
      content: ['mapSnd', 'rejectSnd'],
      classification: ['content', 'content'],
    },
    {
      line: 20,
      content: ['createEntitiesFromRaw'],
      classification: ['content'],
    },
    {
      line: 21,
      content: ['dropJSKeywords'],
      classification: ['text'],
    },
    {
      line: 22,
      content: ['dropTSKeywords'],
      classification: ['text'],
    },
    {
      line: 23,
      content: ['dropUserDefinedValues'],
      classification: ['content'],
    },
    {
      line: 25,
      content: ['replaceNoise'],
      classification: ['content'],
    },
    {
      line: 27,
      content: ['classify'],
      classification: ['text'],
    },
    {
      line: 28,
      content: ['cleanEntities'],
      classification: ['content'],
    },
    {
      line: 29,
      content: ['dropMultilineComments'],
      classification: ['content'],
    },
    {
      line: 30,
      content: ['dropImports'],
      classification: ['content'],
    },
    {
      line: 31,
      content: ['dropStrings'],
      classification: ['content'],
    },
    {
      line: 32,
      content: ['cleanups'],
      classification: ['text'],
    },
    {
      line: 35,
      content: [
        'parser',
        'curry',
        'opts',
        'args',
        'yargsParser',
        'args',
        'opts',
      ],
      classification: [
        'text',
        'text',
        'text',
        'text',
        'content',
        'text',
        'text',
      ],
    },
    {
      line: 37,
      content: ['classifyEntities', 'pipe'],
      classification: ['content', 'text'],
    },
    {
      line: 39,
      content: ['line', 'content'],
      classification: ['text', 'text'],
    },
    {
      line: 40,
      content: ['line'],
      classification: ['text'],
    },
  ],
  entities: {
    text: [
      'args',
      'classification',
      'classify',
      'cleanups',
      'conf',
      'content',
      'curry',
      'dropJS',
      'dropJSKeywords',
      'dropTS',
      'dropTSKeywords',
      'equals',
      'file',
      'histograph',
      'identity',
      'ignore',
      'infer',
      'input',
      'limit',
      'line',
      'minimum',
      'opts',
      'parse',
      'parser',
      'pipe',
      'reject',
      'replace',
      'skip',
      'split',
      'trim',
      'v',
      'wordlimit',
      'x',
    ],
    content: [
      'assumeSimilarWords',
      'classifyEntities',
      'cleanEntities',
      'correlateSimilar',
      'createEntitiesFromRaw',
      'dropImports',
      'dropMultilineComments',
      'dropStrings',
      'dropUserDefinedValues',
      'hMin',
      'histogramMinimum',
      'mapSnd',
      'mergeRight',
      'parseAndClassify',
      'parseAndClassifyWithFile',
      'rejectSnd',
      'replaceNoise',
      'robotTourist',
      'similarWords',
      'skipWords',
      'startsWith',
      'yargsParser',
    ],
    constant: ['I'],
  },
}

test('histograph', () => {
  expect(histograph).toBeTruthy()
  expect(
    histograph({ wordlimit: Infinity, skip: 0, minimum: 0, infer: true }, X)
  ).toEqual({
    entities: {
      constant: ['I'],
      content: [
        'assumeSimilarWords',
        'classifyEntities',
        'cleanEntities',
        'correlateSimilar',
        'createEntitiesFromRaw',
        'dropImports',
        'dropMultilineComments',
        'dropStrings',
        'dropUserDefinedValues',
        'hMin',
        'histogramMinimum',
        'mapSnd',
        'mergeRight',
        'parseAndClassify',
        'parseAndClassifyWithFile',
        'rejectSnd',
        'replaceNoise',
        'robotTourist',
        'similarWords',
        'skipWords',
        'startsWith',
        'yargsParser',
      ],
      text: [
        'args',
        'classification',
        'classify',
        'cleanups',
        'conf',
        'content',
        'curry',
        'dropJS',
        'dropJSKeywords',
        'dropTS',
        'dropTSKeywords',
        'equals',
        'file',
        'histograph',
        'identity',
        'ignore',
        'infer',
        'input',
        'limit',
        'line',
        'minimum',
        'opts',
        'parse',
        'parser',
        'pipe',
        'reject',
        'replace',
        'skip',
        'split',
        'trim',
        'v',
        'wordlimit',
        'x',
      ],
    },
    file: 'src/core.js',
    lines: [
      {
        classification: ['text', 'content'],
        content: ['histograph', 'correlateSimilar'],
        line: 1,
      },
      {
        classification: ['content'],
        content: ['mergeRight'],
        line: 4,
      },
      {
        classification: ['text'],
        content: ['curry'],
        line: 5,
      },
      {
        classification: ['text'],
        content: ['equals'],
        line: 6,
      },
      {
        classification: ['text', 'constant'],
        content: ['identity', 'I'],
        line: 7,
      },
      {
        classification: ['text'],
        content: ['pipe'],
        line: 9,
      },
      {
        classification: ['text'],
        content: ['reject'],
        line: 10,
      },
      {
        classification: ['text'],
        content: ['replace'],
        line: 11,
      },
      {
        classification: ['text'],
        content: ['split'],
        line: 12,
      },
      {
        classification: ['content'],
        content: ['startsWith'],
        line: 13,
      },
      {
        classification: ['text'],
        content: ['trim'],
        line: 14,
      },
      {
        classification: ['content'],
        content: ['yargsParser'],
        line: 16,
      },
      {
        classification: ['content', 'content'],
        content: ['mapSnd', 'rejectSnd'],
        line: 18,
      },
      {
        classification: ['content'],
        content: ['createEntitiesFromRaw'],
        line: 20,
      },
      {
        classification: ['text'],
        content: ['dropJSKeywords'],
        line: 21,
      },
      {
        classification: ['text'],
        content: ['dropTSKeywords'],
        line: 22,
      },
      {
        classification: ['content'],
        content: ['dropUserDefinedValues'],
        line: 23,
      },
      {
        classification: ['content'],
        content: ['replaceNoise'],
        line: 25,
      },
      {
        classification: ['text'],
        content: ['classify'],
        line: 27,
      },
      {
        classification: ['content'],
        content: ['cleanEntities'],
        line: 28,
      },
      {
        classification: ['content'],
        content: ['dropMultilineComments'],
        line: 29,
      },
      {
        classification: ['content'],
        content: ['dropImports'],
        line: 30,
      },
      {
        classification: ['content'],
        content: ['dropStrings'],
        line: 31,
      },
      {
        classification: ['text'],
        content: ['cleanups'],
        line: 32,
      },
      {
        classification: [
          'text',
          'text',
          'text',
          'text',
          'content',
          'text',
          'text',
        ],
        content: [
          'parser',
          'curry',
          'opts',
          'args',
          'yargsParser',
          'args',
          'opts',
        ],
        line: 35,
      },
      {
        classification: ['content', 'text'],
        content: ['classifyEntities', 'pipe'],
        line: 37,
      },
      {
        classification: ['text', 'text'],
        content: ['line', 'content'],
        line: 39,
      },
      {
        classification: ['text'],
        content: ['line'],
        line: 40,
      },
    ],
    words: {
      and: 2,
      arg: 1,
      assum: 1,
      classif: 1,
      classifi: 4,
      clean: 1,
      cleanup: 1,
      comment: 1,
      conf: 1,
      content: 1,
      correl: 1,
      creat: 1,
      curri: 1,
      defin: 1,
      drop: 8,
      entiti: 3,
      equal: 1,
      file: 2,
      from: 1,
      h: 1,
      histogram: 1,
      histograph: 1,
      i: 1,
      ident: 1,
      ignor: 1,
      import: 1,
      infer: 1,
      input: 1,
      js: 2,
      keyword: 2,
      limit: 1,
      line: 1,
      map: 1,
      merg: 1,
      min: 1,
      minimum: 2,
      multilin: 1,
      noi: 1,
      opt: 1,
      par: 3,
      parser: 2,
      pipe: 1,
      raw: 1,
      reject: 2,
      replac: 2,
      right: 1,
      robot: 1,
      similar: 3,
      skip: 2,
      snd: 2,
      split: 1,
      start: 1,
      string: 1,
      tourist: 1,
      trim: 1,
      ts: 2,
      user: 1,
      v: 1,
      valu: 1,
      with: 2,
      word: 3,
      wordlimit: 1,
      x: 1,
      yarg: 1,
    },
  })
})
test('correlateSimilar', () => {
  expect(correlateSimilar).toBeTruthy()
  expect(correlateSimilar([], { words: [], lines: [] })).toEqual({
    lines: [],
    report: {},
    words: [],
  })
})
