[
  {
    "slugName": "executables",
    "pageSummary": "",
    "filename": "executables.js",
    "comments": [
      {
        "start": 17,
        "end": 33,
        "summary": "Check for the existence of a binary",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "checkForBinaryWithCancel",
          "example": "```js\nimport { checkForBinaryWithCancel } from 'bloodline'\nimport { fork } from 'fluture'\nfork(console.warn)(console.log)(\n  checkForBinaryWithCancel(\n    cancellationFn,\n    'gvpr',\n    ['-V'],\n    ''\n  )\n)\n```"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "executables.js"
      },
      {
        "start": 45,
        "end": 60,
        "summary": "Check for multiple binaries in a single call",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "checkForBinaries",
          "example": "```js\nimport { checkForBinaries } from 'bloodline'\nimport { fork } from 'fluture'\nfork(console.warn)(console.log)(\n  checkForBinaries(\n    cancellationFn,\n    '/usr/bin',\n    { gvpr: ['-V'], dot: ['-V'] }\n  )\n)\n```"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "executables.js"
      }
    ],
    "order": 0,
    "links": [],
    "workspace": "executables.j"
  },
  {
    "slugName": "tree",
    "pageSummary": "",
    "filename": "tree.js",
    "comments": [
      {
        "start": 17,
        "end": 25,
        "summary": "Generate a dependency tree, given a config, a directory, and a filename",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "plant",
          "example": "```js\nimport { plant } from 'bloodline'\nconst tree = plant({}, '../..', '../monocle/cli.js')\n```"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "tree.js"
      },
      {
        "start": 30,
        "end": 38,
        "summary": "Test whether a path includes `'node_modules'` within it.",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "isNodeModule",
          "example": "```js\nimport { isNodeModule } from 'bloodline/tree'\nisNodeModule('./node_modules/ramda') // true\n```"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "tree.js"
      },
      {
        "start": 41,
        "end": 49,
        "summary": "Test whether a path includes `'.git'` within it.",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "isGitPath",
          "example": "```js\nimport { isGitPath } from 'bloodline/tree'\nisGitPath('.git/config') // true\n```"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "tree.js"
      },
      {
        "start": 85,
        "end": 96,
        "summary": "Grab an id from a cache if possible",
        "links": [],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "getId",
          "example": "```js\nimport { getId } from 'bloodline/tree'\nconst basePath = '..'\nconst cache = {}\nconst key = 'a'\nconsole.log(getId(basePath, cache, key)) // 'bloodline/a'\n```"
        },
        "keywords": [
          "@example",
          "@name"
        ],
        "filename": "tree.js"
      },
      {
        "start": 106,
        "end": 117,
        "summary": "Take a dependency tree and recursively walk it, returning a grouped set of dependencies.",
        "links": [
          "flattenTree"
        ],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "groupTree",
          "see": [
            "flattenTree"
          ],
          "example": "```js\nimport { groupTree, plant } from 'bloodline/tree'\nconst config = { basePath: '../..' }\nconst tree = plant(config, '..', '../monocle/cli.js')\nconst grouped = groupTree(config, {}, {}, tree)\n```"
        },
        "keywords": [
          "@example",
          "@link",
          "@name",
          "@see"
        ],
        "filename": "tree.js"
      },
      {
        "start": 147,
        "end": 158,
        "summary": "Take a dependency tree and recursively walk it, returning flattened set of dependencies.",
        "links": [
          "groupTree"
        ],
        "fileGroup": "",
        "addTo": "",
        "structure": {
          "name": "flattenTree",
          "see": [
            "groupTree"
          ],
          "example": "```js\nimport { flattenTree, plant } from 'bloodline/tree'\nconst config = { basePath: '../..' }\nconst tree = plant(config, '..', '../monocle/cli.js')\nconst flattened = flattenTree(config, {}, {}, tree)\n```"
        },
        "keywords": [
          "@example",
          "@link",
          "@name",
          "@see"
        ],
        "filename": "tree.js"
      }
    ],
    "order": 0,
    "links": [
      "flattenTree",
      "groupTree"
    ],
    "workspace": "tree.j"
  }
]